{
  "CONFIGURATION_MIGRATION.html": {
    "href": "CONFIGURATION_MIGRATION.html",
    "title": "Configuration Migration Summary | Metro Fare Calculator API Documentation",
    "summary": "Configuration Migration Summary Overview Successfully migrated all hardcoded constants from the Metro Fare Calculator application to a configuration-based system using appsettings.json and strongly-typed configuration classes. ✅ What Was Moved to Configuration 1. Fare Calculation Settings Before: Hardcoded in individual service classes After: Centralized in appsettings.json under FareCalculation section Zone-based fare amounts (1 zone: $2.50, 2 zones: $3.75, 3 zones: $5.00) Distance-based fare settings (base: $1.50, rate: $0.25/km) Passenger discount percentages (Child/Disabled: 50%, Senior: 30%, Student: 20%, Adult: 0%) Time-based pricing rules (peak surcharge: 25%, off-peak discount: 10%) Peak hour definitions (7-9 AM, 5-7 PM weekdays) Off-peak hour definitions (10 PM - 6 AM) Zone mapping (A=1, B=2, C=3) Strategy priorities (Zone-based: 100, Distance-based: 50, etc.) 2. Station Data Before: Hardcoded in StationService.InitializeStations() After: Loaded from appsettings.json under Stations section 8 metro stations with coordinates, zones, and names Latitude/longitude for distance calculations Zone assignments for fare calculations 3. Geography Constants Before: Hardcoded const double R = 6371 in StationService After: Configurable in Geography.EarthRadiusKilometers Earth radius for Haversine distance calculations \uD83C\uDFD7️ Architecture Changes New Configuration Classes Created strongly-typed configuration classes in src/FareCalculator/Configuration/: FareCalculationOptions - Main fare calculation settings DistanceBasedFareOptions - Distance calculation parameters TimeBasedRulesOptions - Time-based pricing rules PeakHourOptions - Peak hour configuration OffPeakHourOptions - Off-peak hour configuration StrategyPriorityOptions - Strategy pattern priorities GeographyOptions - Geographical calculation constants StationOptions - Station data configuration Updated Services Modified all services to use dependency injection for configuration: ZoneBasedFareStrategy - Uses IOptions<FareCalculationOptions> DistanceBasedFareStrategy - Uses IOptions<FareCalculationOptions> PassengerDiscountStrategy - Uses IOptions<FareCalculationOptions> TimeBasedDiscountStrategy - Uses IOptions<FareCalculationOptions> FareRuleEngine - Uses IOptions<FareCalculationOptions> StationService - Uses IOptions<List<Station>> and IOptions<GeographyOptions> Configuration Registration Updated Program.cs to register all configuration sections: services.Configure<FareCalculationOptions>( context.Configuration.GetSection(FareCalculationOptions.SectionName)); services.Configure<GeographyOptions>( context.Configuration.GetSection(GeographyOptions.SectionName)); services.Configure<List<Station>>( context.Configuration.GetSection(StationOptions.SectionName)); \uD83D\uDCC1 File Changes New Files src/FareCalculator/Configuration/FareCalculationConfig.cs - Configuration classes src/FareCalculator/appsettings.json - Configuration data CONFIGURATION_MIGRATION.md - This summary document Modified Files src/FareCalculator/FareCalculator.csproj - Added configuration packages src/FareCalculator/Program.cs - Configuration registration src/FareCalculator/Services/FareRuleEngine.cs - Configuration injection src/FareCalculator/Services/StationService.cs - Configuration injection src/FareCalculator/Strategies/*.cs - All strategies updated tests/**/*.cs - All test files updated with configuration mocks README.md - Updated with configuration documentation \uD83D\uDD27 Configuration Structure The appsettings.json is organized into logical sections: { \"Logging\": { /* Standard .NET logging config */ }, \"FareCalculation\": { \"Currency\": \"USD\", \"ZoneBasedFares\": { /* Zone pricing */ }, \"DistanceBasedFares\": { /* Distance pricing */ }, \"PassengerDiscounts\": { /* Discount percentages */ }, \"TimeBasedRules\": { /* Peak/off-peak rules */ }, \"ZoneMapping\": { /* Zone letter to number mapping */ }, \"Priorities\": { /* Strategy execution priorities */ } }, \"Geography\": { \"EarthRadiusKilometers\": 6371 }, \"Stations\": [ /* Array of station objects */ ] } ✅ Benefits Achieved 1. Maintainability No code recompilation needed for fare changes Easy to modify pricing rules seasonally Simple station data management 2. Flexibility Environment-specific configurations (dev/staging/prod) A/B testing of different fare structures Dynamic pricing rule adjustments 3. Type Safety Strongly-typed configuration classes Compile-time validation IntelliSense support for configuration 4. Testability Easy to mock configuration in tests Isolated testing of configuration scenarios Consistent test data setup \uD83E\uDDEA Testing Updates Updated all test files to provide configuration mocks: StationServiceTests - Mock station list and geography options FareRuleEngineTests - Mock fare calculation options ZoneBasedFareStrategyTests - Mock zone fare configuration PassengerDiscountStrategyTests - Mock discount configuration Integration Tests - Full configuration setup for end-to-end testing All 54 tests continue to pass after the migration. \uD83D\uDE80 Validation Build Status: ✅ PASSED dotnet build # Result: Build succeeded Test Status: ✅ ALL PASSED dotnet test # Result: total: 54, failed: 0, succeeded: 54, skipped: 0 Application Status: ✅ FUNCTIONAL Application starts successfully Loads configuration from appsettings.json All fare calculation logic works as expected Station data loaded from configuration \uD83D\uDCC8 Impact Summary Configuration Lines: 114 lines of JSON configuration Code Files Modified: 15 files New Configuration Classes: 8 classes Hardcoded Constants Eliminated: 20+ constants Test Compatibility: 100% maintained Functionality: 100% preserved \uD83D\uDD04 Migration Pattern The migration followed a consistent pattern: Extract hardcoded constants to configuration classes Create strongly-typed options classes Inject IOptions<T> into service constructors Replace hardcoded values with configuration property access Register configuration sections in DI container Update tests with configuration mocks Validate functionality preservation This pattern can be reused for future configuration migrations in other projects. \uD83C\uDFAF Next Steps The configuration system is now ready for: Environment-specific overrides (appsettings.Development.json) Azure App Configuration integration Feature flags for experimental fare rules External configuration management systems Dynamic configuration reloading (with IOptionsMonitor<T>) \uD83D\uDCDD Conclusion Successfully transformed a hardcoded application into a flexible, configuration-driven system while maintaining 100% backward compatibility and test coverage. The Metro Fare Calculator is now ready for production deployment with enterprise-grade configuration management."
  },
  "README.html": {
    "href": "README.html",
    "title": "Metro Fare Calculator | Metro Fare Calculator API Documentation",
    "summary": "Metro Fare Calculator A C# console application for calculating metro/subway fare costs with support for different passenger types, time-based pricing, and zone-based fare calculation. Features Zone-based Fare Calculation: Calculates fares based on the number of zones traveled Passenger Type Discounts: Different pricing for adults, children, seniors, students, and disabled passengers Time-based Pricing: Peak hour surcharges and off-peak discounts Distance Calculation: Uses Haversine formula to calculate distances between stations Configuration-based System: All constants (fares, discounts, stations) stored in appsettings.json Dependency Injection: Modern .NET architecture with proper DI container setup Comprehensive Logging: Structured logging throughout the application Unit & Integration Tests: Full test coverage with mocking and real dependency testing Complete Documentation: XML documentation and DocFX-generated API documentation Documentation This project includes comprehensive documentation generated with DocFX: \uD83D\uDCD6 API Documentation XML Documentation: All public APIs are documented with XML comments Generated Documentation Site: Professional documentation website with DocFX Design Patterns Guide: Detailed explanation of Strategy and State pattern implementations API Reference: Complete interface and model documentation \uD83D\uDEE0️ Building Documentation Prerequisites Install DocFX globally: dotnet tool install -g docfx Generate Documentation # Quick build and serve docfx docfx.json --serve # Or use the provided script powershell -ExecutionPolicy Bypass -File build-docs.ps1 # Manual process dotnet build # Generate XML documentation docfx build docfx.json # Build documentation site docfx serve _site # Serve locally at http://localhost:8080 Documentation Structure Main Site: Generated in _site/ directory API Reference: Auto-generated from XML documentation Articles: Markdown files in docs/ directory Configuration: docfx.json with proper paths configured Architecture The application follows clean architecture principles with: Models: Core data structures (Station, FareRequest, FareResponse, PassengerType) Interfaces: Abstractions for all services (IStationService, IFareCalculationService, IFareRuleEngine) Services: Concrete implementations with business logic Configuration: Strongly-typed configuration classes for all settings Dependency Injection: Proper service registration and lifetime management Configuration All hardcoded constants have been moved to appsettings.json for easy customization: Fare Settings (FareCalculation section) { \"FareCalculation\": { \"Currency\": \"USD\", \"ZoneBasedFares\": { \"1\": 2.50, \"2\": 3.75, \"3\": 5.00 }, \"DistanceBasedFares\": { \"BaseFare\": 1.50, \"PerKilometerRate\": 0.25 }, \"PassengerDiscounts\": { \"Adult\": 0.00, \"Child\": 0.50, \"Senior\": 0.30, \"Student\": 0.20, \"Disabled\": 0.50 }, \"TimeBasedRules\": { \"PeakHours\": { \"Surcharge\": 0.25, \"WeekdayMorningStart\": 7, \"WeekdayMorningEnd\": 9, \"WeekdayEveningStart\": 17, \"WeekdayEveningEnd\": 19 }, \"OffPeakHours\": { \"Discount\": 0.10, \"NightStart\": 22, \"NightEnd\": 6 } }, \"ZoneMapping\": { \"A\": 1, \"B\": 2, \"C\": 3 }, \"Priorities\": { \"ZoneBasedFareStrategy\": 100, \"DistanceBasedFareStrategy\": 50, \"PassengerDiscountStrategy\": 100, \"TimeBasedDiscountStrategy\": 90 } } } Station Data (Stations section) Station coordinates, zones, and names are configurable: { \"Stations\": [ { \"Id\": 1, \"Name\": \"Downtown Central\", \"Zone\": \"A\", \"Latitude\": 40.7128, \"Longitude\": -74.0060 } ] } Geography Settings (Geography section) { \"Geography\": { \"EarthRadiusKilometers\": 6371 } } Configuration Benefits Easy Customization: Modify fares without recompiling Environment-specific Settings: Different configs for dev/prod Dynamic Pricing: Change time-based rules seasonally Station Management: Add/modify stations via configuration Strongly-typed: Compile-time safety with configuration classes Fare Rules Base Fares by Zone Same zone (1 zone): $2.50 Cross one zone (2 zones): $3.75 Cross two zones (3 zones): $5.00 Passenger Discounts Adult: No discount (0%) Child: 50% discount Senior: 30% discount Student: 20% discount Disabled: 50% discount Time-based Pricing Peak Hours (weekdays 7-9 AM and 5-7 PM): 25% surcharge Off-Peak Hours (10 PM - 6 AM): 10% discount Regular Hours: No adjustment Getting Started Prerequisites .NET 8.0 SDK or later IDE (Visual Studio, VS Code, or JetBrains Rider) Installation Clone the repository: git clone <repository-url> cd FareCalculator Restore dependencies: dotnet restore Build the solution: dotnet build Running the Application dotnet run --project src/FareCalculator Follow the interactive prompts to: Select origin and destination stations Choose passenger type Enter travel date/time (or use current time) View calculated fare Sample Stations The application includes 8 predefined stations: Zone A: Downtown Central Uptown North Harbor View Zone B: Eastside Plaza Westwood Terminal University Campus Zone C: Southgate Junction Airport Express Running Tests Unit Tests dotnet test tests/FareCalculator.Tests --filter Category!=Integration Integration Tests dotnet test tests/FareCalculator.Tests --filter Category=Integration All Tests dotnet test Test Coverage The test suite includes: Unit Tests: Mock-based testing of individual services Integration Tests: End-to-end testing with real dependencies Theory Tests: Parameterized tests for multiple scenarios Exception Handling: Error condition testing Project Structure FareCalculator/ ├── src/ │ └── FareCalculator/ │ ├── Configuration/ # Strongly-typed configuration classes │ ├── Interfaces/ # Service abstractions │ ├── Models/ # Data models │ ├── Services/ # Business logic implementations │ ├── States/ # State pattern implementations │ ├── Strategies/ # Strategy pattern implementations │ ├── Program.cs # Application entry point │ ├── appsettings.json # Configuration file │ └── FareCalculator.csproj ├── tests/ │ └── FareCalculator.Tests/ │ ├── Services/ # Unit tests │ ├── Strategies/ # Strategy tests │ ├── Integration/ # Integration tests │ └── FareCalculator.Tests.csproj ├── docs/ # Documentation files ├── _site/ # Generated documentation site ├── docfx.json # DocFX configuration ├── FareCalculator.sln └── README.md Dependencies Main Application Microsoft.Extensions.Hosting (8.0.0) Microsoft.Extensions.DependencyInjection (8.0.0) Microsoft.Extensions.Logging (8.0.0) Microsoft.Extensions.Logging.Console (8.0.0) Microsoft.Extensions.Configuration (8.0.0) Microsoft.Extensions.Options.ConfigurationExtensions (8.0.0) Testing Microsoft.NET.Test.Sdk (17.8.0) xunit (2.6.1) xunit.runner.visualstudio (2.5.1) Moq (4.20.69) Example Usage === Metro Fare Calculator === Available Stations: ================== 1. Downtown Central (Zone A) 2. Uptown North (Zone A) 3. Eastside Plaza (Zone B) 4. Westwood Terminal (Zone B) 5. Southgate Junction (Zone C) 6. Airport Express (Zone C) 7. University Campus (Zone B) 8. Harbor View (Zone A) --- New Fare Calculation --- Enter origin station name or ID: 1 Enter destination station name or ID: Airport Express Select passenger type: 1. Adult 2. Child 3. Senior 4. Student 5. Disabled Enter choice (1-5): 2 Enter travel date and time (YYYY-MM-DD HH:MM) or press Enter for now: 2024-01-15 08:30 === Fare Calculation Result === Fare Amount: $3.13 USD Fare Type: Child - Peak Hours Number of Zones: 3 Distance: 32.18 km Description: Journey from Downtown Central to Airport Express covers 3 zone(s). Base fare: $5.00, Final fare after adjustments: $3.13 =============================== Contributing Fork the repository Create a feature branch Add tests for new functionality Ensure all tests pass Submit a pull request License This project is open source and available under the MIT License."
  },
  "api/FareCalculator.Configuration.DistanceBasedFareOptions.html": {
    "href": "api/FareCalculator.Configuration.DistanceBasedFareOptions.html",
    "title": "Class DistanceBasedFareOptions | Metro Fare Calculator API Documentation",
    "summary": "Class DistanceBasedFareOptions Namespace FareCalculator.Configuration Assembly FareCalculator.dll Configuration options for distance-based fare calculation. public class DistanceBasedFareOptions Inheritance object DistanceBasedFareOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BaseFare Gets or sets the base fare amount before distance calculation. public decimal BaseFare { get; set; } Property Value decimal PerKilometerRate Gets or sets the rate per kilometer. public decimal PerKilometerRate { get; set; } Property Value decimal"
  },
  "api/FareCalculator.Configuration.FareCalculationOptions.html": {
    "href": "api/FareCalculator.Configuration.FareCalculationOptions.html",
    "title": "Class FareCalculationOptions | Metro Fare Calculator API Documentation",
    "summary": "Class FareCalculationOptions Namespace FareCalculator.Configuration Assembly FareCalculator.dll Configuration options for fare calculation settings. public class FareCalculationOptions Inheritance object FareCalculationOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields SectionName Configuration section name in appsettings.json. public const string SectionName = \"FareCalculation\" Field Value string Properties Currency Gets or sets the default currency for fare amounts. public string Currency { get; set; } Property Value string DistanceBasedFares Gets or sets distance-based fare configuration. public DistanceBasedFareOptions DistanceBasedFares { get; set; } Property Value DistanceBasedFareOptions PassengerDiscounts Gets or sets passenger discount percentages by type. public Dictionary<string, decimal> PassengerDiscounts { get; set; } Property Value Dictionary<string, decimal> Priorities Gets or sets strategy priority values. public StrategyPriorityOptions Priorities { get; set; } Property Value StrategyPriorityOptions TimeBasedRules Gets or sets time-based fare adjustment rules. public TimeBasedRulesOptions TimeBasedRules { get; set; } Property Value TimeBasedRulesOptions ZoneBasedFares Gets or sets zone-based fare amounts. public Dictionary<int, decimal> ZoneBasedFares { get; set; } Property Value Dictionary<int, decimal> ZoneMapping Gets or sets zone to numeric mapping. public Dictionary<string, int> ZoneMapping { get; set; } Property Value Dictionary<string, int> Methods GetPassengerDiscount(PassengerType) Gets the discount percentage for a passenger type. public decimal GetPassengerDiscount(PassengerType passengerType) Parameters passengerType PassengerType The passenger type. Returns decimal The discount percentage (0.0 to 1.0). GetZoneBasedFare(int) Gets the zone-based fare for a number of zones. public decimal GetZoneBasedFare(int numberOfZones) Parameters numberOfZones int The number of zones traveled. Returns decimal The base fare amount. GetZoneValue(string) Gets the numeric zone value for a zone letter. public int GetZoneValue(string zone) Parameters zone string The zone letter (e.g., \"A\", \"B\", \"C\"). Returns int The numeric zone value."
  },
  "api/FareCalculator.Configuration.GeographyOptions.html": {
    "href": "api/FareCalculator.Configuration.GeographyOptions.html",
    "title": "Class GeographyOptions | Metro Fare Calculator API Documentation",
    "summary": "Class GeographyOptions Namespace FareCalculator.Configuration Assembly FareCalculator.dll Configuration options for geographical calculations. public class GeographyOptions Inheritance object GeographyOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields SectionName Configuration section name in appsettings.json. public const string SectionName = \"Geography\" Field Value string Properties EarthRadiusKilometers Gets or sets the Earth's radius in kilometers for distance calculations. public double EarthRadiusKilometers { get; set; } Property Value double"
  },
  "api/FareCalculator.Configuration.MetroLineOptions.html": {
    "href": "api/FareCalculator.Configuration.MetroLineOptions.html",
    "title": "Class MetroLineOptions | Metro Fare Calculator API Documentation",
    "summary": "Class MetroLineOptions Namespace FareCalculator.Configuration Assembly FareCalculator.dll Configuration options for metro line data. public class MetroLineOptions Inheritance object MetroLineOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields SectionName Configuration section name in appsettings.json. public const string SectionName = \"MetroLines\" Field Value string Properties LineFareMultipliers Gets or sets line-specific fare multipliers. public Dictionary<string, decimal> LineFareMultipliers { get; set; } Property Value Dictionary<string, decimal> Lines Gets or sets the list of metro lines in the system. public List<MetroLine> Lines { get; set; } Property Value List<MetroLine> TransferPenalties Gets or sets transfer penalties between different metro lines. public Dictionary<string, decimal> TransferPenalties { get; set; } Property Value Dictionary<string, decimal> Methods GetLineFareMultiplier(string) Gets the fare multiplier for a specific metro line code. public decimal GetLineFareMultiplier(string lineCode) Parameters lineCode string The metro line code. Returns decimal The fare multiplier for the line (default 1.0). GetTransferPenalty(string, string) Gets the transfer penalty for switching between metro lines. public decimal GetTransferPenalty(string fromLineCode, string toLineCode) Parameters fromLineCode string The origin line code. toLineCode string The destination line code. Returns decimal The transfer penalty amount (default 0.0)."
  },
  "api/FareCalculator.Configuration.OffPeakHourOptions.html": {
    "href": "api/FareCalculator.Configuration.OffPeakHourOptions.html",
    "title": "Class OffPeakHourOptions | Metro Fare Calculator API Documentation",
    "summary": "Class OffPeakHourOptions Namespace FareCalculator.Configuration Assembly FareCalculator.dll Configuration options for off-peak hour rules. public class OffPeakHourOptions Inheritance object OffPeakHourOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Discount Gets or sets the discount percentage for off-peak hours. public decimal Discount { get; set; } Property Value decimal NightEnd Gets or sets the night hours end time. public int NightEnd { get; set; } Property Value int NightStart Gets or sets the night hours start time. public int NightStart { get; set; } Property Value int"
  },
  "api/FareCalculator.Configuration.PeakHourOptions.html": {
    "href": "api/FareCalculator.Configuration.PeakHourOptions.html",
    "title": "Class PeakHourOptions | Metro Fare Calculator API Documentation",
    "summary": "Class PeakHourOptions Namespace FareCalculator.Configuration Assembly FareCalculator.dll Configuration options for peak hour rules. public class PeakHourOptions Inheritance object PeakHourOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Surcharge Gets or sets the surcharge percentage for peak hours. public decimal Surcharge { get; set; } Property Value decimal WeekdayEveningEnd Gets or sets the weekday evening peak end hour. public int WeekdayEveningEnd { get; set; } Property Value int WeekdayEveningStart Gets or sets the weekday evening peak start hour. public int WeekdayEveningStart { get; set; } Property Value int WeekdayMorningEnd Gets or sets the weekday morning peak end hour. public int WeekdayMorningEnd { get; set; } Property Value int WeekdayMorningStart Gets or sets the weekday morning peak start hour. public int WeekdayMorningStart { get; set; } Property Value int"
  },
  "api/FareCalculator.Configuration.StationOptions.html": {
    "href": "api/FareCalculator.Configuration.StationOptions.html",
    "title": "Class StationOptions | Metro Fare Calculator API Documentation",
    "summary": "Class StationOptions Namespace FareCalculator.Configuration Assembly FareCalculator.dll Configuration options for station data. public class StationOptions Inheritance object StationOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields SectionName Configuration section name in appsettings.json. public const string SectionName = \"Stations\" Field Value string Properties Stations Gets or sets the list of configured stations. public List<Station> Stations { get; set; } Property Value List<Station>"
  },
  "api/FareCalculator.Configuration.StrategyPriorityOptions.html": {
    "href": "api/FareCalculator.Configuration.StrategyPriorityOptions.html",
    "title": "Class StrategyPriorityOptions | Metro Fare Calculator API Documentation",
    "summary": "Class StrategyPriorityOptions Namespace FareCalculator.Configuration Assembly FareCalculator.dll Configuration options for strategy priorities. public class StrategyPriorityOptions Inheritance object StrategyPriorityOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DistanceBasedFareStrategy Gets or sets the distance-based fare strategy priority. public int DistanceBasedFareStrategy { get; set; } Property Value int MetroLineFareStrategy Gets or sets the metro line fare strategy priority. public int MetroLineFareStrategy { get; set; } Property Value int PassengerDiscountStrategy Gets or sets the passenger discount strategy priority. public int PassengerDiscountStrategy { get; set; } Property Value int TimeBasedDiscountStrategy Gets or sets the time-based discount strategy priority. public int TimeBasedDiscountStrategy { get; set; } Property Value int ZoneBasedFareStrategy Gets or sets the zone-based fare strategy priority. public int ZoneBasedFareStrategy { get; set; } Property Value int"
  },
  "api/FareCalculator.Configuration.TimeBasedRulesOptions.html": {
    "href": "api/FareCalculator.Configuration.TimeBasedRulesOptions.html",
    "title": "Class TimeBasedRulesOptions | Metro Fare Calculator API Documentation",
    "summary": "Class TimeBasedRulesOptions Namespace FareCalculator.Configuration Assembly FareCalculator.dll Configuration options for time-based fare rules. public class TimeBasedRulesOptions Inheritance object TimeBasedRulesOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties OffPeakHours Gets or sets off-peak hour configuration. public OffPeakHourOptions OffPeakHours { get; set; } Property Value OffPeakHourOptions PeakHours Gets or sets peak hour configuration. public PeakHourOptions PeakHours { get; set; } Property Value PeakHourOptions"
  },
  "api/FareCalculator.Configuration.html": {
    "href": "api/FareCalculator.Configuration.html",
    "title": "Namespace FareCalculator.Configuration | Metro Fare Calculator API Documentation",
    "summary": "Namespace FareCalculator.Configuration Classes DistanceBasedFareOptions Configuration options for distance-based fare calculation. FareCalculationOptions Configuration options for fare calculation settings. GeographyOptions Configuration options for geographical calculations. MetroLineOptions Configuration options for metro line data. OffPeakHourOptions Configuration options for off-peak hour rules. PeakHourOptions Configuration options for peak hour rules. StationOptions Configuration options for station data. StrategyPriorityOptions Configuration options for strategy priorities. TimeBasedRulesOptions Configuration options for time-based fare rules."
  },
  "api/FareCalculator.Interfaces.FareCalculationContext.html": {
    "href": "api/FareCalculator.Interfaces.FareCalculationContext.html",
    "title": "Class FareCalculationContext | Metro Fare Calculator API Documentation",
    "summary": "Class FareCalculationContext Namespace FareCalculator.Interfaces Assembly FareCalculator.dll Represents the context object that carries data and state information throughout the fare calculation workflow. This class maintains the complete state of a fare calculation process as it moves through different processing stages. public class FareCalculationContext Inheritance object FareCalculationContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CurrentFare Gets or sets the current calculated fare amount during processing. public decimal CurrentFare { get; set; } Property Value decimal The fare amount as it progresses through different calculation stages. CurrentState Gets or sets the current state in the fare calculation state machine. public IFareCalculationState? CurrentState { get; set; } Property Value IFareCalculationState The currently active state responsible for processing the context. Data Gets or sets additional data storage for passing information between states. public Dictionary<string, object> Data { get; set; } Property Value Dictionary<string, object> A dictionary for storing intermediate calculation results, metadata, and state-specific data. ProcessingLog Gets or sets a log of processing steps for audit trail and debugging purposes. public List<string> ProcessingLog { get; set; } Property Value List<string> A list of log messages describing each step in the fare calculation process. Request Gets or sets the original fare calculation request containing journey details. public FareRequest Request { get; set; } Property Value FareRequest The fare request with origin, destination, passenger type, and travel date information. Response Gets or sets the fare response that will be populated during the calculation process. public FareResponse Response { get; set; } Property Value FareResponse The fare response containing the final calculated amount and related information."
  },
  "api/FareCalculator.Interfaces.IDiscountStrategy.html": {
    "href": "api/FareCalculator.Interfaces.IDiscountStrategy.html",
    "title": "Interface IDiscountStrategy | Metro Fare Calculator API Documentation",
    "summary": "Interface IDiscountStrategy Namespace FareCalculator.Interfaces Assembly FareCalculator.dll Defines the contract for discount strategies that can apply various types of discounts to base fares. Implements the Strategy pattern to allow flexible discount application based on passenger type and other criteria. public interface IDiscountStrategy Properties Priority Gets the priority of this discount strategy for application when multiple strategies apply. Higher values indicate higher priority and are applied first. int Priority { get; } Property Value int An integer representing the strategy's priority. Higher numbers are applied first. StrategyName Gets the unique name of this discount strategy. string StrategyName { get; } Property Value string A descriptive name identifying the strategy (e.g., \"PassengerDiscount\", \"TimeBasedDiscount\"). Methods AppliesTo(PassengerType) Determines whether this discount strategy applies to the specified passenger type. bool AppliesTo(PassengerType passengerType) Parameters passengerType PassengerType The type of passenger to evaluate for discount eligibility. Returns bool True if this discount strategy applies to the passenger type; otherwise, false. ApplyDiscount(decimal, FareRequest) Applies this discount strategy to the specified base fare for the given request. decimal ApplyDiscount(decimal baseFare, FareRequest request) Parameters baseFare decimal The original base fare amount before discount application. request FareRequest The fare calculation request containing passenger type and travel details. Returns decimal The fare amount after applying the discount. Returns the original amount if no discount applies. Exceptions ArgumentException Thrown when baseFare is negative. ArgumentNullException Thrown when the request parameter is null."
  },
  "api/FareCalculator.Interfaces.IFareCalculationService.html": {
    "href": "api/FareCalculator.Interfaces.IFareCalculationService.html",
    "title": "Interface IFareCalculationService | Metro Fare Calculator API Documentation",
    "summary": "Interface IFareCalculationService Namespace FareCalculator.Interfaces Assembly FareCalculator.dll Provides services for calculating metro transit fares based on various parameters including origin, destination, passenger type, and travel time. public interface IFareCalculationService Methods CalculateFareAsync(FareRequest) Calculates the fare for a metro transit journey asynchronously. Task<FareResponse> CalculateFareAsync(FareRequest request) Parameters request FareRequest The fare calculation request containing origin, destination, passenger type, and travel date. Returns Task<FareResponse> A task that represents the asynchronous operation. The task result contains the calculated fare response with amount, currency, and additional details. Exceptions ArgumentNullException Thrown when the request parameter is null. InvalidOperationException Thrown when no suitable calculation strategy can be found for the request."
  },
  "api/FareCalculator.Interfaces.IFareCalculationState.html": {
    "href": "api/FareCalculator.Interfaces.IFareCalculationState.html",
    "title": "Interface IFareCalculationState | Metro Fare Calculator API Documentation",
    "summary": "Interface IFareCalculationState Namespace FareCalculator.Interfaces Assembly FareCalculator.dll Defines the contract for states in the fare calculation state machine. Implements the State pattern to manage the fare calculation workflow through distinct processing phases. public interface IFareCalculationState Properties StateName Gets the unique name of this fare calculation state. string StateName { get; } Property Value string A descriptive name identifying the state (e.g., \"InitialCalculation\", \"DiscountApplication\"). Methods CanTransitionTo(IFareCalculationState) Determines whether this state can transition to the specified next state according to the state machine rules. bool CanTransitionTo(IFareCalculationState nextState) Parameters nextState IFareCalculationState The proposed next state in the workflow. Returns bool True if the transition is valid; otherwise, false. Exceptions ArgumentNullException Thrown when the nextState parameter is null. ProcessAsync(FareCalculationContext) Processes the fare calculation context according to this state's specific logic and responsibilities. Task<FareCalculationContext> ProcessAsync(FareCalculationContext context) Parameters context FareCalculationContext The fare calculation context containing request data, current state, and processing results. Returns Task<FareCalculationContext> A task that represents the asynchronous operation. The task result contains the updated context after processing. Exceptions ArgumentNullException Thrown when the context parameter is null. InvalidOperationException Thrown when the state cannot process the current context."
  },
  "api/FareCalculator.Interfaces.IFareCalculationStrategy.html": {
    "href": "api/FareCalculator.Interfaces.IFareCalculationStrategy.html",
    "title": "Interface IFareCalculationStrategy | Metro Fare Calculator API Documentation",
    "summary": "Interface IFareCalculationStrategy Namespace FareCalculator.Interfaces Assembly FareCalculator.dll Defines the contract for fare calculation strategies that can compute base fares using different algorithms. Implements the Strategy pattern to allow runtime selection of fare calculation methods. public interface IFareCalculationStrategy Properties Priority Gets the priority of this strategy for selection when multiple strategies can handle a request. Higher values indicate higher priority. int Priority { get; } Property Value int An integer representing the strategy's priority. Higher numbers are selected first. StrategyName Gets the unique name of this fare calculation strategy. string StrategyName { get; } Property Value string A descriptive name identifying the strategy (e.g., \"ZoneBased\", \"DistanceBased\"). Methods CalculateBaseFareAsync(FareRequest) Calculates the base fare for a transit journey asynchronously using this strategy's specific algorithm. Task<decimal> CalculateBaseFareAsync(FareRequest request) Parameters request FareRequest The fare calculation request containing journey details. Returns Task<decimal> A task that represents the asynchronous operation. The task result contains the calculated base fare amount. Exceptions ArgumentNullException Thrown when the request parameter is null. InvalidOperationException Thrown when the strategy cannot handle the given request. CanHandle(FareRequest) Determines whether this strategy can handle the specified fare calculation request. bool CanHandle(FareRequest request) Parameters request FareRequest The fare calculation request to evaluate. Returns bool True if this strategy can process the request; otherwise, false."
  },
  "api/FareCalculator.Interfaces.IFareRuleEngine.html": {
    "href": "api/FareCalculator.Interfaces.IFareRuleEngine.html",
    "title": "Interface IFareRuleEngine | Metro Fare Calculator API Documentation",
    "summary": "Interface IFareRuleEngine Namespace FareCalculator.Interfaces Assembly FareCalculator.dll Provides rule-based fare processing services including discount application and time-based fare adjustments. Implements business rules for fare calculations in the metro transit system. public interface IFareRuleEngine Methods ApplyDiscounts(decimal, PassengerType) Applies passenger-type-based discounts to the base fare according to business rules. decimal ApplyDiscounts(decimal baseFare, PassengerType passengerType) Parameters baseFare decimal The original base fare amount before discount application. passengerType PassengerType The type of passenger for which to calculate discounts. Returns decimal The fare amount after applying applicable passenger discounts. Exceptions ArgumentException Thrown when baseFare is negative. ApplyTimeBasedRules(decimal, DateTime) Applies time-based fare adjustments such as peak hour surcharges or off-peak discounts. decimal ApplyTimeBasedRules(decimal baseFare, DateTime travelTime) Parameters baseFare decimal The original base fare amount before time-based adjustments. travelTime DateTime The date and time of the planned travel. Returns decimal The fare amount after applying time-based rules (surcharges or discounts). Exceptions ArgumentException Thrown when baseFare is negative. CalculateNumberOfZones(Station, Station) Calculates the number of fare zones that will be traversed between the origin and destination stations. int CalculateNumberOfZones(Station origin, Station destination) Parameters origin Station The starting station of the journey. destination Station The ending station of the journey. Returns int The number of zones that will be crossed during the journey, used for fare calculation. Exceptions ArgumentNullException Thrown when either origin or destination parameter is null."
  },
  "api/FareCalculator.Interfaces.IMetroLineService.html": {
    "href": "api/FareCalculator.Interfaces.IMetroLineService.html",
    "title": "Interface IMetroLineService | Metro Fare Calculator API Documentation",
    "summary": "Interface IMetroLineService Namespace FareCalculator.Interfaces Assembly FareCalculator.dll Provides services for managing and retrieving metro line information and operations. public interface IMetroLineService Methods CalculateOptimalRouteAsync(Station, Station) Calculates the required transfers between two stations and returns the optimal route. Task<MetroRoute> CalculateOptimalRouteAsync(Station origin, Station destination) Parameters origin Station The origin station. destination Station The destination station. Returns Task<MetroRoute> A task that represents the asynchronous operation. The task result contains the optimal route with transfer information. Exceptions ArgumentNullException Thrown when either origin or destination parameter is null. GetAllMetroLinesAsync() Retrieves all available metro lines in the system asynchronously. Task<IEnumerable<MetroLine>> GetAllMetroLinesAsync() Returns Task<IEnumerable<MetroLine>> A task that represents the asynchronous operation. The task result contains a collection of all metro lines. GetMetroLineByCodeAsync(string) Retrieves a metro line by its code asynchronously (case-insensitive search). Task<MetroLine?> GetMetroLineByCodeAsync(string code) Parameters code string The code of the metro line to search for. Returns Task<MetroLine> A task that represents the asynchronous operation. The task result contains the metro line if found, otherwise null. Exceptions ArgumentException Thrown when the code parameter is null or empty. GetMetroLineByIdAsync(int) Retrieves a metro line by its unique identifier asynchronously. Task<MetroLine?> GetMetroLineByIdAsync(int id) Parameters id int The unique identifier of the metro line. Returns Task<MetroLine> A task that represents the asynchronous operation. The task result contains the metro line if found, otherwise null. GetMetroLinesByStationAsync(Station) Gets all metro lines that serve a specific station asynchronously. Task<IEnumerable<MetroLine>> GetMetroLinesByStationAsync(Station station) Parameters station Station The station to check for metro lines. Returns Task<IEnumerable<MetroLine>> A task that represents the asynchronous operation. The task result contains metro lines serving the station. Exceptions ArgumentNullException Thrown when the station parameter is null. GetStationsByMetroLineAsync(MetroLine) Gets all stations served by a specific metro line asynchronously. Task<IEnumerable<Station>> GetStationsByMetroLineAsync(MetroLine metroLine) Parameters metroLine MetroLine The metro line to get stations for. Returns Task<IEnumerable<Station>> A task that represents the asynchronous operation. The task result contains stations served by the metro line. Exceptions ArgumentNullException Thrown when the metroLine parameter is null. HasDirectRouteAsync(Station, Station) Determines if a direct route exists between two stations on the same metro line. Task<bool> HasDirectRouteAsync(Station origin, Station destination) Parameters origin Station The origin station. destination Station The destination station. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates if a direct route exists. Exceptions ArgumentNullException Thrown when either origin or destination parameter is null."
  },
  "api/FareCalculator.Interfaces.IStationService.html": {
    "href": "api/FareCalculator.Interfaces.IStationService.html",
    "title": "Interface IStationService | Metro Fare Calculator API Documentation",
    "summary": "Interface IStationService Namespace FareCalculator.Interfaces Assembly FareCalculator.dll Provides services for managing and retrieving station information and calculating distances between stations. public interface IStationService Methods CalculateDistanceAsync(Station, Station) Calculates the distance between two stations in kilometers using their geographical coordinates. Task<double> CalculateDistanceAsync(Station origin, Station destination) Parameters origin Station The origin station. destination Station The destination station. Returns Task<double> A task that represents the asynchronous operation. The task result contains the distance in kilometers. Exceptions ArgumentNullException Thrown when either origin or destination parameter is null. GetAllStationsAsync() Retrieves all available stations in the metro system asynchronously. Task<IEnumerable<Station>> GetAllStationsAsync() Returns Task<IEnumerable<Station>> A task that represents the asynchronous operation. The task result contains a collection of all stations. GetStationByIdAsync(int) Retrieves a station by its unique identifier asynchronously. Task<Station?> GetStationByIdAsync(int id) Parameters id int The unique identifier of the station. Returns Task<Station> A task that represents the asynchronous operation. The task result contains the station if found, otherwise null. GetStationByNameAsync(string) Retrieves a station by its name asynchronously (case-insensitive search). Task<Station?> GetStationByNameAsync(string name) Parameters name string The name of the station to search for. Returns Task<Station> A task that represents the asynchronous operation. The task result contains the station if found, otherwise null. Exceptions ArgumentException Thrown when the name parameter is null or empty."
  },
  "api/FareCalculator.Interfaces.html": {
    "href": "api/FareCalculator.Interfaces.html",
    "title": "Namespace FareCalculator.Interfaces | Metro Fare Calculator API Documentation",
    "summary": "Namespace FareCalculator.Interfaces Classes FareCalculationContext Represents the context object that carries data and state information throughout the fare calculation workflow. This class maintains the complete state of a fare calculation process as it moves through different processing stages. Interfaces IDiscountStrategy Defines the contract for discount strategies that can apply various types of discounts to base fares. Implements the Strategy pattern to allow flexible discount application based on passenger type and other criteria. IFareCalculationService Provides services for calculating metro transit fares based on various parameters including origin, destination, passenger type, and travel time. IFareCalculationState Defines the contract for states in the fare calculation state machine. Implements the State pattern to manage the fare calculation workflow through distinct processing phases. IFareCalculationStrategy Defines the contract for fare calculation strategies that can compute base fares using different algorithms. Implements the Strategy pattern to allow runtime selection of fare calculation methods. IFareRuleEngine Provides rule-based fare processing services including discount application and time-based fare adjustments. Implements business rules for fare calculations in the metro transit system. IMetroLineService Provides services for managing and retrieving metro line information and operations. IStationService Provides services for managing and retrieving station information and calculating distances between stations."
  },
  "api/FareCalculator.Models.FareRequest.html": {
    "href": "api/FareCalculator.Models.FareRequest.html",
    "title": "Class FareRequest | Metro Fare Calculator API Documentation",
    "summary": "Class FareRequest Namespace FareCalculator.Models Assembly FareCalculator.dll Represents a request for fare calculation containing all necessary information for determining transit costs. public class FareRequest Inheritance object FareRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Destination Gets or sets the destination station where the journey ends. public Station Destination { get; set; } Property Value Station The ending station for the transit journey. Origin Gets or sets the origin station where the journey begins. public Station Origin { get; set; } Property Value Station The starting station for the transit journey. PassengerType Gets or sets the type of passenger making the journey. public PassengerType PassengerType { get; set; } Property Value PassengerType The passenger classification used to determine applicable discounts and fare rules. TravelDate Gets or sets the planned date and time of travel. public DateTime TravelDate { get; set; } Property Value DateTime The travel date and time used for applying time-based fare rules such as peak hour surcharges."
  },
  "api/FareCalculator.Models.FareResponse.html": {
    "href": "api/FareCalculator.Models.FareResponse.html",
    "title": "Class FareResponse | Metro Fare Calculator API Documentation",
    "summary": "Class FareResponse Namespace FareCalculator.Models Assembly FareCalculator.dll Represents the result of a fare calculation containing the final fare amount and related journey information. public class FareResponse Inheritance object FareResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Amount Gets or sets the calculated fare amount for the journey. public decimal Amount { get; set; } Property Value decimal The final fare amount after applying all applicable discounts and surcharges. Currency Gets or sets the currency code for the fare amount. public string Currency { get; set; } Property Value string The three-letter currency code (e.g., \"USD\", \"EUR\") indicating the currency of the fare amount. Description Gets or sets additional description or breakdown of the fare calculation. public string Description { get; set; } Property Value string Human-readable text providing details about how the fare was calculated, including any discounts or surcharges applied. Distance Gets or sets the total distance of the journey in kilometers. public double Distance { get; set; } Property Value double The geographical distance between origin and destination stations, used for distance-based calculations. FareType Gets or sets the type of fare calculation used. public string FareType { get; set; } Property Value string A descriptive string indicating which fare calculation method was applied (e.g., \"Zone-based\", \"Distance-based\"). NumberOfZones Gets or sets the number of fare zones traversed during the journey. public int NumberOfZones { get; set; } Property Value int The count of fare zones crossed, which is used in zone-based fare calculation strategies."
  },
  "api/FareCalculator.Models.MetroLine.html": {
    "href": "api/FareCalculator.Models.MetroLine.html",
    "title": "Class MetroLine | Metro Fare Calculator API Documentation",
    "summary": "Class MetroLine Namespace FareCalculator.Models Assembly FareCalculator.dll Represents a metro line with its characteristics and operational information. public class MetroLine Inheritance object MetroLine Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Code Gets or sets the short code or abbreviation for the metro line. public string Code { get; set; } Property Value string A short identifier for the metro line (e.g., \"RL\", \"BL\", \"GL\"). Color Gets or sets the color associated with the metro line for visual identification. public string Color { get; set; } Property Value string The hex color code or color name used to represent the line on maps and signage. FareMultiplier Gets or sets the fare multiplier for this metro line. public decimal FareMultiplier { get; set; } Property Value decimal A decimal multiplier applied to base fares for trips on this line (1.0 = normal fare, 1.5 = 50% premium). Id Gets or sets the unique identifier for the metro line. public int Id { get; set; } Property Value int A positive integer that uniquely identifies the metro line within the system. IsOperational Gets or sets a value indicating whether the metro line is currently operational. public bool IsOperational { get; set; } Property Value bool True if the line is operational; otherwise, false. LineType Gets or sets the type of the metro line (e.g., \"Express\", \"Local\", \"Shuttle\"). public string LineType { get; set; } Property Value string A string describing the service type of the metro line. Name Gets or sets the name of the metro line. public string Name { get; set; } Property Value string The human-readable name of the metro line (e.g., \"Red Line\", \"Blue Line\"). Notes Gets or sets additional notes or information about the metro line. public string? Notes { get; set; } Property Value string Optional additional information about the line's characteristics or special services. OperatingHours Gets or sets the operating hours for the metro line. public string OperatingHours { get; set; } Property Value string A string describing the operating hours (e.g., \"5:00 AM - 12:00 AM\")."
  },
  "api/FareCalculator.Models.MetroRoute.html": {
    "href": "api/FareCalculator.Models.MetroRoute.html",
    "title": "Class MetroRoute | Metro Fare Calculator API Documentation",
    "summary": "Class MetroRoute Namespace FareCalculator.Models Assembly FareCalculator.dll Represents a calculated route between two stations in the metro system. public class MetroRoute Inheritance object MetroRoute Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Destination Gets or sets the destination station of the route. public Station Destination { get; set; } Property Value Station EstimatedTravelTimeMinutes Gets or sets the total estimated travel time in minutes. public int EstimatedTravelTimeMinutes { get; set; } Property Value int The estimated travel time including transfers and waiting time. IsDirectRoute Gets or sets a value indicating whether this is a direct route (no transfers). public bool IsDirectRoute { get; } Property Value bool True if the route requires no transfers; otherwise, false. Origin Gets or sets the origin station of the route. public Station Origin { get; set; } Property Value Station Segments Gets or sets the sequence of metro line segments for this route. public List<RouteSegment> Segments { get; set; } Property Value List<RouteSegment> A list of route segments, each representing travel on a specific metro line. TotalDistanceKilometers Gets or sets the total distance of the route in kilometers. public double TotalDistanceKilometers { get; set; } Property Value double The sum of distances for all segments in the route. TransferCount Gets or sets the total number of transfers required for this route. public int TransferCount { get; set; } Property Value int The number of times a passenger must change metro lines (0 for direct routes). TransferStations Gets or sets the list of transfer stations on this route. public List<Station> TransferStations { get; set; } Property Value List<Station> Stations where passengers must transfer between metro lines."
  },
  "api/FareCalculator.Models.PassengerType.html": {
    "href": "api/FareCalculator.Models.PassengerType.html",
    "title": "Enum PassengerType | Metro Fare Calculator API Documentation",
    "summary": "Enum PassengerType Namespace FareCalculator.Models Assembly FareCalculator.dll Defines the types of passengers for fare calculation purposes, each with different discount eligibility. public enum PassengerType Fields Adult = 0 Adult passenger (18+ years) with no discount eligibility. Child = 1 Child passenger (typically under 12 years) eligible for significant discounts. Disabled = 4 Passenger with disabilities, eligible for accessibility-based discounts. Senior = 2 Senior citizen passenger (typically 65+ years) eligible for age-based discounts. Student = 3 Student passenger with valid student identification, eligible for educational discounts."
  },
  "api/FareCalculator.Models.RouteSegment.html": {
    "href": "api/FareCalculator.Models.RouteSegment.html",
    "title": "Class RouteSegment | Metro Fare Calculator API Documentation",
    "summary": "Class RouteSegment Namespace FareCalculator.Models Assembly FareCalculator.dll Represents a segment of a metro route on a specific metro line. public class RouteSegment Inheritance object RouteSegment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DistanceKilometers Gets or sets the distance of this segment in kilometers. public double DistanceKilometers { get; set; } Property Value double EndStation Gets or sets the ending station for this segment. public Station EndStation { get; set; } Property Value Station EstimatedTimeMinutes Gets or sets the estimated travel time for this segment in minutes. public int EstimatedTimeMinutes { get; set; } Property Value int MetroLine Gets or sets the metro line for this segment. public MetroLine MetroLine { get; set; } Property Value MetroLine StartStation Gets or sets the starting station for this segment. public Station StartStation { get; set; } Property Value Station StationCount Gets or sets the number of stations traveled in this segment. public int StationCount { get; set; } Property Value int"
  },
  "api/FareCalculator.Models.Station.html": {
    "href": "api/FareCalculator.Models.Station.html",
    "title": "Class Station | Metro Fare Calculator API Documentation",
    "summary": "Class Station Namespace FareCalculator.Models Assembly FareCalculator.dll Represents a metro station with its location, zone information, and geographical coordinates. public class Station Inheritance object Station Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id Gets or sets the unique identifier for the station. public int Id { get; set; } Property Value int A positive integer that uniquely identifies the station within the metro system. IsTransferStation Gets or sets a value indicating whether this station is a transfer station. public bool IsTransferStation { get; set; } Property Value bool True if the station allows transfers between different metro lines; otherwise, false. Latitude Gets or sets the latitude coordinate of the station's geographical location. public double Latitude { get; set; } Property Value double The latitude in decimal degrees, used for distance calculations between stations. Longitude Gets or sets the longitude coordinate of the station's geographical location. public double Longitude { get; set; } Property Value double The longitude in decimal degrees, used for distance calculations between stations. MetroLineIds Gets or sets the collection of metro line IDs that serve this station. public List<int> MetroLineIds { get; set; } Property Value List<int> A list of metro line identifiers indicating which lines stop at this station. Name Gets or sets the name of the station. public string Name { get; set; } Property Value string The human-readable name of the station as displayed to passengers. StationType Gets or sets the station type (e.g., \"Standard\", \"Express\", \"Terminal\"). public string StationType { get; set; } Property Value string A string describing the type or category of the station. Zone Gets or sets the fare zone designation for the station. public string Zone { get; set; } Property Value string A string identifier (e.g., \"A\", \"B\", \"C\") indicating which fare zone the station belongs to."
  },
  "api/FareCalculator.Models.html": {
    "href": "api/FareCalculator.Models.html",
    "title": "Namespace FareCalculator.Models | Metro Fare Calculator API Documentation",
    "summary": "Namespace FareCalculator.Models Classes FareRequest Represents a request for fare calculation containing all necessary information for determining transit costs. FareResponse Represents the result of a fare calculation containing the final fare amount and related journey information. MetroLine Represents a metro line with its characteristics and operational information. MetroRoute Represents a calculated route between two stations in the metro system. RouteSegment Represents a segment of a metro route on a specific metro line. Station Represents a metro station with its location, zone information, and geographical coordinates. Enums PassengerType Defines the types of passengers for fare calculation purposes, each with different discount eligibility."
  },
  "api/FareCalculator.Services.FareCalculationService.html": {
    "href": "api/FareCalculator.Services.FareCalculationService.html",
    "title": "Class FareCalculationService | Metro Fare Calculator API Documentation",
    "summary": "Class FareCalculationService Namespace FareCalculator.Services Assembly FareCalculator.dll Provides fare calculation services using a state machine approach to process fare requests. This service orchestrates the complete fare calculation workflow from initial request to final response. public class FareCalculationService : IFareCalculationService Inheritance object FareCalculationService Implements IFareCalculationService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FareCalculationService(ILogger<FareCalculationService>, IFareCalculationStateMachine) Initializes a new instance of the FareCalculationService class. public FareCalculationService(ILogger<FareCalculationService> logger, IFareCalculationStateMachine stateMachine) Parameters logger ILogger<FareCalculationService> The logger for capturing service execution information. stateMachine IFareCalculationStateMachine The state machine responsible for orchestrating the fare calculation workflow. Exceptions ArgumentNullException Thrown when logger or stateMachine is null. Methods CalculateFareAsync(FareRequest) Calculates the fare for a metro transit journey asynchronously using the state machine workflow. public Task<FareResponse> CalculateFareAsync(FareRequest request) Parameters request FareRequest The fare calculation request containing journey details. Returns Task<FareResponse> A task that represents the asynchronous operation. The task result contains the calculated fare response. Exceptions ArgumentNullException Thrown when the request parameter is null. InvalidOperationException Thrown when the state machine cannot process the request."
  },
  "api/FareCalculator.Services.FareCalculationStateMachine.html": {
    "href": "api/FareCalculator.Services.FareCalculationStateMachine.html",
    "title": "Class FareCalculationStateMachine | Metro Fare Calculator API Documentation",
    "summary": "Class FareCalculationStateMachine Namespace FareCalculator.Services Assembly FareCalculator.dll Implements a state machine that orchestrates fare calculation through a series of processing states. Each state handles a specific aspect of the fare calculation workflow, ensuring proper separation of concerns. public class FareCalculationStateMachine : IFareCalculationStateMachine Inheritance object FareCalculationStateMachine Implements IFareCalculationStateMachine Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FareCalculationStateMachine(ILogger<FareCalculationStateMachine>, IServiceProvider) Initializes a new instance of the FareCalculationStateMachine class. public FareCalculationStateMachine(ILogger<FareCalculationStateMachine> logger, IServiceProvider serviceProvider) Parameters logger ILogger<FareCalculationStateMachine> The logger for capturing state machine execution information. serviceProvider IServiceProvider The service provider for resolving state dependencies. Exceptions ArgumentNullException Thrown when logger or serviceProvider is null. Methods ProcessAsync(FareRequest) Processes a fare calculation request through all states and returns the final fare response. public Task<FareResponse> ProcessAsync(FareRequest request) Parameters request FareRequest The fare calculation request to process. Returns Task<FareResponse> A task that represents the asynchronous operation. The task result contains the final fare response. Exceptions ArgumentNullException Thrown when the request parameter is null. InvalidOperationException Thrown when any state in the workflow fails to process the request. ProcessWithContextAsync(FareRequest) Processes a fare calculation request through all states and returns the complete context with processing details. This method provides full visibility into the state machine's execution process. public Task<FareCalculationContext> ProcessWithContextAsync(FareRequest request) Parameters request FareRequest The fare calculation request to process. Returns Task<FareCalculationContext> A task that represents the asynchronous operation. The task result contains the complete processing context. Exceptions ArgumentNullException Thrown when the request parameter is null. InvalidOperationException Thrown when any state in the workflow fails to process the request."
  },
  "api/FareCalculator.Services.FareRuleEngine.html": {
    "href": "api/FareCalculator.Services.FareRuleEngine.html",
    "title": "Class FareRuleEngine | Metro Fare Calculator API Documentation",
    "summary": "Class FareRuleEngine Namespace FareCalculator.Services Assembly FareCalculator.dll Implements business rules for fare processing including passenger discounts, time-based adjustments, and zone calculations. Contains the core logic for applying various fare rules and policies in the metro transit system. public class FareRuleEngine : IFareRuleEngine Inheritance object FareRuleEngine Implements IFareRuleEngine Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FareRuleEngine(ILogger<FareRuleEngine>, IOptions<FareCalculationOptions>) Initializes a new instance of the FareRuleEngine class with configuration-based settings. public FareRuleEngine(ILogger<FareRuleEngine> logger, IOptions<FareCalculationOptions> options) Parameters logger ILogger<FareRuleEngine> The logger for capturing rule engine execution information. options IOptions<FareCalculationOptions> Configuration options for fare calculation settings. Exceptions ArgumentNullException Thrown when logger or options is null. Methods ApplyDiscounts(decimal, PassengerType) Applies passenger-type-based discounts to the base fare according to business rules. public decimal ApplyDiscounts(decimal baseFare, PassengerType passengerType) Parameters baseFare decimal The original base fare amount before discount application. passengerType PassengerType The type of passenger for which to calculate discounts. Returns decimal The fare amount after applying applicable passenger discounts. Exceptions ArgumentException Thrown when baseFare is negative. ApplyTimeBasedRules(decimal, DateTime) Applies time-based fare adjustments such as peak hour surcharges or off-peak discounts. Peak hours are 7-9 AM and 5-7 PM on weekdays with 25% surcharge. Off-peak hours are 10 PM - 6 AM with 10% discount. public decimal ApplyTimeBasedRules(decimal baseFare, DateTime travelTime) Parameters baseFare decimal The original base fare amount before time-based adjustments. travelTime DateTime The date and time of the planned travel. Returns decimal The fare amount after applying time-based rules (surcharges or discounts). Exceptions ArgumentException Thrown when baseFare is negative. CalculateNumberOfZones(Station, Station) Calculates the number of fare zones that will be traversed between the origin and destination stations. Zone A = 1, Zone B = 2, Zone C = 3. The calculation includes both origin and destination zones. public int CalculateNumberOfZones(Station origin, Station destination) Parameters origin Station The starting station of the journey. destination Station The ending station of the journey. Returns int The number of zones that will be crossed during the journey, used for fare calculation. Exceptions ArgumentNullException Thrown when either origin or destination parameter is null."
  },
  "api/FareCalculator.Services.IFareCalculationStateMachine.html": {
    "href": "api/FareCalculator.Services.IFareCalculationStateMachine.html",
    "title": "Interface IFareCalculationStateMachine | Metro Fare Calculator API Documentation",
    "summary": "Interface IFareCalculationStateMachine Namespace FareCalculator.Services Assembly FareCalculator.dll Defines the contract for a state machine that orchestrates the fare calculation workflow through multiple processing states. public interface IFareCalculationStateMachine Methods ProcessAsync(FareRequest) Processes a fare calculation request through all states and returns the final fare response. Task<FareResponse> ProcessAsync(FareRequest request) Parameters request FareRequest The fare calculation request to process. Returns Task<FareResponse> A task that represents the asynchronous operation. The task result contains the final fare response. Exceptions ArgumentNullException Thrown when the request parameter is null. InvalidOperationException Thrown when the state machine cannot process the request. ProcessWithContextAsync(FareRequest) Processes a fare calculation request through all states and returns the complete context with processing details. Task<FareCalculationContext> ProcessWithContextAsync(FareRequest request) Parameters request FareRequest The fare calculation request to process. Returns Task<FareCalculationContext> A task that represents the asynchronous operation. The task result contains the complete processing context. Exceptions ArgumentNullException Thrown when the request parameter is null. InvalidOperationException Thrown when the state machine cannot process the request."
  },
  "api/FareCalculator.Services.MetroLineService.html": {
    "href": "api/FareCalculator.Services.MetroLineService.html",
    "title": "Class MetroLineService | Metro Fare Calculator API Documentation",
    "summary": "Class MetroLineService Namespace FareCalculator.Services Assembly FareCalculator.dll Provides metro line management services including line lookup, route calculation, and transfer analysis. public class MetroLineService : IMetroLineService Inheritance object MetroLineService Implements IMetroLineService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MetroLineService(ILogger<MetroLineService>, IOptions<MetroLineOptions>, IStationService) Initializes a new instance of the MetroLineService class. public MetroLineService(ILogger<MetroLineService> logger, IOptions<MetroLineOptions> metroLineOptions, IStationService stationService) Parameters logger ILogger<MetroLineService> The logger for capturing service execution information. metroLineOptions IOptions<MetroLineOptions> Configuration options for metro line data. stationService IStationService The station service for station operations. Exceptions ArgumentNullException Thrown when any parameter is null. Methods CalculateOptimalRouteAsync(Station, Station) Calculates the required transfers between two stations and returns the optimal route. public Task<MetroRoute> CalculateOptimalRouteAsync(Station origin, Station destination) Parameters origin Station The origin station. destination Station The destination station. Returns Task<MetroRoute> A task that represents the asynchronous operation. The task result contains the optimal route with transfer information. Exceptions ArgumentNullException Thrown when either origin or destination parameter is null. GetAllMetroLinesAsync() Retrieves all available metro lines in the system asynchronously. public Task<IEnumerable<MetroLine>> GetAllMetroLinesAsync() Returns Task<IEnumerable<MetroLine>> A task that represents the asynchronous operation. The task result contains a collection of all metro lines. GetMetroLineByCodeAsync(string) Retrieves a metro line by its code asynchronously using case-insensitive search. public Task<MetroLine?> GetMetroLineByCodeAsync(string code) Parameters code string The code of the metro line to search for. Returns Task<MetroLine> A task that represents the asynchronous operation. The task result contains the metro line if found, otherwise null. Exceptions ArgumentException Thrown when the code parameter is null or empty. GetMetroLineByIdAsync(int) Retrieves a metro line by its unique identifier asynchronously. public Task<MetroLine?> GetMetroLineByIdAsync(int id) Parameters id int The unique identifier of the metro line. Returns Task<MetroLine> A task that represents the asynchronous operation. The task result contains the metro line if found, otherwise null. GetMetroLinesByStationAsync(Station) Gets all metro lines that serve a specific station asynchronously. public Task<IEnumerable<MetroLine>> GetMetroLinesByStationAsync(Station station) Parameters station Station The station to check for metro lines. Returns Task<IEnumerable<MetroLine>> A task that represents the asynchronous operation. The task result contains metro lines serving the station. Exceptions ArgumentNullException Thrown when the station parameter is null. GetStationsByMetroLineAsync(MetroLine) Gets all stations served by a specific metro line asynchronously. public Task<IEnumerable<Station>> GetStationsByMetroLineAsync(MetroLine metroLine) Parameters metroLine MetroLine The metro line to get stations for. Returns Task<IEnumerable<Station>> A task that represents the asynchronous operation. The task result contains stations served by the metro line. Exceptions ArgumentNullException Thrown when the metroLine parameter is null. HasDirectRouteAsync(Station, Station) Determines if a direct route exists between two stations on the same metro line. public Task<bool> HasDirectRouteAsync(Station origin, Station destination) Parameters origin Station The origin station. destination Station The destination station. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates if a direct route exists. Exceptions ArgumentNullException Thrown when either origin or destination parameter is null."
  },
  "api/FareCalculator.Services.StationService.html": {
    "href": "api/FareCalculator.Services.StationService.html",
    "title": "Class StationService | Metro Fare Calculator API Documentation",
    "summary": "Class StationService Namespace FareCalculator.Services Assembly FareCalculator.dll Provides station management services including station lookup, retrieval, and distance calculations. Uses configuration-based station data and geographical constants for calculations. public class StationService : IStationService Inheritance object StationService Implements IStationService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StationService(ILogger<StationService>, IOptions<List<Station>>, IOptions<GeographyOptions>) Initializes a new instance of the StationService class with configuration-based settings. public StationService(ILogger<StationService> logger, IOptions<List<Station>> stationOptions, IOptions<GeographyOptions> geographyOptions) Parameters logger ILogger<StationService> The logger for capturing service execution information. stationOptions IOptions<List<Station>> Configuration options for station data. geographyOptions IOptions<GeographyOptions> Configuration options for geographical calculations. Exceptions ArgumentNullException Thrown when any parameter is null. Methods CalculateDistanceAsync(Station, Station) Calculates the distance between two stations in kilometers using the Haversine formula. public Task<double> CalculateDistanceAsync(Station origin, Station destination) Parameters origin Station The origin station. destination Station The destination station. Returns Task<double> A task that represents the asynchronous operation. The task result contains the distance in kilometers. Exceptions ArgumentNullException Thrown when either origin or destination parameter is null. GetAllStationsAsync() Retrieves all available stations in the metro system asynchronously. public Task<IEnumerable<Station>> GetAllStationsAsync() Returns Task<IEnumerable<Station>> A task that represents the asynchronous operation. The task result contains a collection of all stations. GetStationByIdAsync(int) Retrieves a station by its unique identifier asynchronously. public Task<Station?> GetStationByIdAsync(int id) Parameters id int The unique identifier of the station. Returns Task<Station> A task that represents the asynchronous operation. The task result contains the station if found, otherwise null. GetStationByNameAsync(string) Retrieves a station by its name asynchronously using case-insensitive search. public Task<Station?> GetStationByNameAsync(string name) Parameters name string The name of the station to search for. Returns Task<Station> A task that represents the asynchronous operation. The task result contains the station if found, otherwise null. Exceptions ArgumentException Thrown when the name parameter is null or empty."
  },
  "api/FareCalculator.Services.html": {
    "href": "api/FareCalculator.Services.html",
    "title": "Namespace FareCalculator.Services | Metro Fare Calculator API Documentation",
    "summary": "Namespace FareCalculator.Services Classes FareCalculationService Provides fare calculation services using a state machine approach to process fare requests. This service orchestrates the complete fare calculation workflow from initial request to final response. FareCalculationStateMachine Implements a state machine that orchestrates fare calculation through a series of processing states. Each state handles a specific aspect of the fare calculation workflow, ensuring proper separation of concerns. FareRuleEngine Implements business rules for fare processing including passenger discounts, time-based adjustments, and zone calculations. Contains the core logic for applying various fare rules and policies in the metro transit system. MetroLineService Provides metro line management services including line lookup, route calculation, and transfer analysis. StationService Provides station management services including station lookup, retrieval, and distance calculations. Uses configuration-based station data and geographical constants for calculations. Interfaces IFareCalculationStateMachine Defines the contract for a state machine that orchestrates the fare calculation workflow through multiple processing states."
  },
  "api/FareCalculator.States.BaseFareCalculationState.html": {
    "href": "api/FareCalculator.States.BaseFareCalculationState.html",
    "title": "Class BaseFareCalculationState | Metro Fare Calculator API Documentation",
    "summary": "Class BaseFareCalculationState Namespace FareCalculator.States Assembly FareCalculator.dll Represents the base fare calculation state that determines the initial fare using available calculation strategies. This state selects the most appropriate strategy based on priority and capability to handle the request. public class BaseFareCalculationState : IFareCalculationState Inheritance object BaseFareCalculationState Implements IFareCalculationState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseFareCalculationState(ILogger<BaseFareCalculationState>, IEnumerable<IFareCalculationStrategy>, IStationService) Initializes a new instance of the BaseFareCalculationState class. public BaseFareCalculationState(ILogger<BaseFareCalculationState> logger, IEnumerable<IFareCalculationStrategy> strategies, IStationService stationService) Parameters logger ILogger<BaseFareCalculationState> The logger for capturing state execution information. strategies IEnumerable<IFareCalculationStrategy> The collection of available fare calculation strategies. stationService IStationService The station service for retrieving station information and calculating distances. Exceptions ArgumentNullException Thrown when any parameter is null. Properties StateName Gets the name of this state in the fare calculation workflow. public string StateName { get; } Property Value string Returns \"BaseFareCalculation\" to identify this as the base fare calculation state. Methods CanTransitionTo(IFareCalculationState) Determines whether this state can transition to the specified next state. The base fare calculation state can only transition to the discount application state. public bool CanTransitionTo(IFareCalculationState nextState) Parameters nextState IFareCalculationState The proposed next state in the workflow. Returns bool True if the next state is the discount application state; otherwise, false. Exceptions ArgumentNullException Thrown when the nextState parameter is null. ProcessAsync(FareCalculationContext) Processes the fare calculation context by selecting an appropriate strategy and calculating the base fare. Also calculates and stores additional journey information such as distance between stations. public Task<FareCalculationContext> ProcessAsync(FareCalculationContext context) Parameters context FareCalculationContext The fare calculation context containing the request and current state. Returns Task<FareCalculationContext> A task that represents the asynchronous operation. The task result contains the updated context with base fare. Exceptions ArgumentNullException Thrown when the context parameter is null. InvalidOperationException Thrown when no suitable fare calculation strategy is found."
  },
  "api/FareCalculator.States.DiscountApplicationState.html": {
    "href": "api/FareCalculator.States.DiscountApplicationState.html",
    "title": "Class DiscountApplicationState | Metro Fare Calculator API Documentation",
    "summary": "Class DiscountApplicationState Namespace FareCalculator.States Assembly FareCalculator.dll Represents the discount application state that applies all applicable discount strategies to the base fare. This state processes discounts in priority order and tracks the total discount amount applied. public class DiscountApplicationState : IFareCalculationState Inheritance object DiscountApplicationState Implements IFareCalculationState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DiscountApplicationState(ILogger<DiscountApplicationState>, IEnumerable<IDiscountStrategy>) Initializes a new instance of the DiscountApplicationState class. public DiscountApplicationState(ILogger<DiscountApplicationState> logger, IEnumerable<IDiscountStrategy> discountStrategies) Parameters logger ILogger<DiscountApplicationState> The logger for capturing state execution information. discountStrategies IEnumerable<IDiscountStrategy> The collection of available discount strategies. Exceptions ArgumentNullException Thrown when any parameter is null. Properties StateName Gets the name of this state in the fare calculation workflow. public string StateName { get; } Property Value string Returns \"DiscountApplication\" to identify this as the discount application state. Methods CanTransitionTo(IFareCalculationState) Determines whether this state can transition to the specified next state. The discount application state can only transition to the final calculation state. public bool CanTransitionTo(IFareCalculationState nextState) Parameters nextState IFareCalculationState The proposed next state in the workflow. Returns bool True if the next state is the final calculation state; otherwise, false. Exceptions ArgumentNullException Thrown when the nextState parameter is null. ProcessAsync(FareCalculationContext) Processes the fare calculation context by applying all applicable discount strategies. Strategies are applied in priority order (highest priority first) and the total discount is tracked. public Task<FareCalculationContext> ProcessAsync(FareCalculationContext context) Parameters context FareCalculationContext The fare calculation context containing the base fare and passenger details. Returns Task<FareCalculationContext> A task that represents the asynchronous operation. The task result contains the updated context with discounted fare. Exceptions ArgumentNullException Thrown when the context parameter is null."
  },
  "api/FareCalculator.States.FinalCalculationState.html": {
    "href": "api/FareCalculator.States.FinalCalculationState.html",
    "title": "Class FinalCalculationState | Metro Fare Calculator API Documentation",
    "summary": "Class FinalCalculationState Namespace FareCalculator.States Assembly FareCalculator.dll Represents the final calculation state that completes the fare calculation process. This state finalizes the fare amount, calculates zone information, and generates descriptive information. public class FinalCalculationState : IFareCalculationState Inheritance object FinalCalculationState Implements IFareCalculationState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FinalCalculationState(ILogger<FinalCalculationState>, IFareRuleEngine) Initializes a new instance of the FinalCalculationState class. public FinalCalculationState(ILogger<FinalCalculationState> logger, IFareRuleEngine fareRuleEngine) Parameters logger ILogger<FinalCalculationState> The logger for capturing state execution information. fareRuleEngine IFareRuleEngine The fare rule engine for calculating zones and applying final adjustments. Exceptions ArgumentNullException Thrown when any parameter is null. Properties StateName Gets the name of this state in the fare calculation workflow. public string StateName { get; } Property Value string Returns \"FinalCalculation\" to identify this as the final calculation state. Methods CanTransitionTo(IFareCalculationState) Determines whether this state can transition to the specified next state. The final calculation state cannot transition to any other state as it represents the end of the workflow. public bool CanTransitionTo(IFareCalculationState nextState) Parameters nextState IFareCalculationState The proposed next state in the workflow. Returns bool Always returns false as this is the terminal state in the workflow. ProcessAsync(FareCalculationContext) Processes the fare calculation context by finalizing the fare amount and generating complete response information. Rounds the final fare, calculates zone information, and creates descriptive text for the journey. public Task<FareCalculationContext> ProcessAsync(FareCalculationContext context) Parameters context FareCalculationContext The fare calculation context containing the processed fare information. Returns Task<FareCalculationContext> A task that represents the asynchronous operation. The task result contains the completed context with final response. Exceptions ArgumentNullException Thrown when the context parameter is null."
  },
  "api/FareCalculator.States.InitialCalculationState.html": {
    "href": "api/FareCalculator.States.InitialCalculationState.html",
    "title": "Class InitialCalculationState | Metro Fare Calculator API Documentation",
    "summary": "Class InitialCalculationState Namespace FareCalculator.States Assembly FareCalculator.dll Represents the initial state in the fare calculation workflow that initializes the calculation context. This state sets up the basic information and prepares the context for subsequent processing states. public class InitialCalculationState : IFareCalculationState Inheritance object InitialCalculationState Implements IFareCalculationState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InitialCalculationState(ILogger<InitialCalculationState>) Initializes a new instance of the InitialCalculationState class. public InitialCalculationState(ILogger<InitialCalculationState> logger) Parameters logger ILogger<InitialCalculationState> The logger for capturing state execution information. Exceptions ArgumentNullException Thrown when logger is null. Properties StateName Gets the name of this state in the fare calculation workflow. public string StateName { get; } Property Value string Returns \"Initial\" to identify this as the initial calculation state. Methods CanTransitionTo(IFareCalculationState) Determines whether this state can transition to the specified next state. The initial state can only transition to the base fare calculation state. public bool CanTransitionTo(IFareCalculationState nextState) Parameters nextState IFareCalculationState The proposed next state in the workflow. Returns bool True if the next state is the base fare calculation state; otherwise, false. Exceptions ArgumentNullException Thrown when the nextState parameter is null. ProcessAsync(FareCalculationContext) Processes the fare calculation context by initializing basic information and logging the journey details. Sets up the response currency and records the calculation start time and journey parameters. public Task<FareCalculationContext> ProcessAsync(FareCalculationContext context) Parameters context FareCalculationContext The fare calculation context to initialize. Returns Task<FareCalculationContext> A task that represents the asynchronous operation. The task result contains the initialized context. Exceptions ArgumentNullException Thrown when the context parameter is null."
  },
  "api/FareCalculator.States.html": {
    "href": "api/FareCalculator.States.html",
    "title": "Namespace FareCalculator.States | Metro Fare Calculator API Documentation",
    "summary": "Namespace FareCalculator.States Classes BaseFareCalculationState Represents the base fare calculation state that determines the initial fare using available calculation strategies. This state selects the most appropriate strategy based on priority and capability to handle the request. DiscountApplicationState Represents the discount application state that applies all applicable discount strategies to the base fare. This state processes discounts in priority order and tracks the total discount amount applied. FinalCalculationState Represents the final calculation state that completes the fare calculation process. This state finalizes the fare amount, calculates zone information, and generates descriptive information. InitialCalculationState Represents the initial state in the fare calculation workflow that initializes the calculation context. This state sets up the basic information and prepares the context for subsequent processing states."
  },
  "api/FareCalculator.Strategies.DistanceBasedFareStrategy.html": {
    "href": "api/FareCalculator.Strategies.DistanceBasedFareStrategy.html",
    "title": "Class DistanceBasedFareStrategy | Metro Fare Calculator API Documentation",
    "summary": "Class DistanceBasedFareStrategy Namespace FareCalculator.Strategies Assembly FareCalculator.dll public class DistanceBasedFareStrategy : IFareCalculationStrategy Inheritance object DistanceBasedFareStrategy Implements IFareCalculationStrategy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DistanceBasedFareStrategy(ILogger<DistanceBasedFareStrategy>, IStationService, IOptions<FareCalculationOptions>) public DistanceBasedFareStrategy(ILogger<DistanceBasedFareStrategy> logger, IStationService stationService, IOptions<FareCalculationOptions> options) Parameters logger ILogger<DistanceBasedFareStrategy> stationService IStationService options IOptions<FareCalculationOptions> Properties Priority Gets the priority of this strategy for selection when multiple strategies can handle a request. Higher values indicate higher priority. public int Priority { get; } Property Value int An integer representing the strategy's priority. Higher numbers are selected first. StrategyName Gets the unique name of this fare calculation strategy. public string StrategyName { get; } Property Value string A descriptive name identifying the strategy (e.g., \"ZoneBased\", \"DistanceBased\"). Methods CalculateBaseFareAsync(FareRequest) Calculates the base fare for a transit journey asynchronously using this strategy's specific algorithm. public Task<decimal> CalculateBaseFareAsync(FareRequest request) Parameters request FareRequest The fare calculation request containing journey details. Returns Task<decimal> A task that represents the asynchronous operation. The task result contains the calculated base fare amount. Exceptions ArgumentNullException Thrown when the request parameter is null. InvalidOperationException Thrown when the strategy cannot handle the given request. CanHandle(FareRequest) Determines whether this strategy can handle the specified fare calculation request. public bool CanHandle(FareRequest request) Parameters request FareRequest The fare calculation request to evaluate. Returns bool True if this strategy can process the request; otherwise, false."
  },
  "api/FareCalculator.Strategies.MetroLineFareStrategy.html": {
    "href": "api/FareCalculator.Strategies.MetroLineFareStrategy.html",
    "title": "Class MetroLineFareStrategy | Metro Fare Calculator API Documentation",
    "summary": "Class MetroLineFareStrategy Namespace FareCalculator.Strategies Assembly FareCalculator.dll Fare calculation strategy that considers metro line characteristics including line multipliers and transfer penalties. public class MetroLineFareStrategy : IFareCalculationStrategy Inheritance object MetroLineFareStrategy Implements IFareCalculationStrategy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MetroLineFareStrategy(ILogger<MetroLineFareStrategy>, IMetroLineService, IOptions<FareCalculationOptions>, IOptions<MetroLineOptions>) Initializes a new instance of the MetroLineFareStrategy class. public MetroLineFareStrategy(ILogger<MetroLineFareStrategy> logger, IMetroLineService metroLineService, IOptions<FareCalculationOptions> fareOptions, IOptions<MetroLineOptions> metroLineOptions) Parameters logger ILogger<MetroLineFareStrategy> The logger for capturing strategy execution information. metroLineService IMetroLineService The metro line service for route calculations. fareOptions IOptions<FareCalculationOptions> Configuration options for fare calculation. metroLineOptions IOptions<MetroLineOptions> Configuration options for metro line settings. Exceptions ArgumentNullException Thrown when any parameter is null. Properties Priority Gets the priority of this strategy relative to other fare calculation strategies. public int Priority { get; } Property Value int StrategyName Gets the strategy name for identification purposes. public string StrategyName { get; } Property Value string Methods CalculateBaseFareAsync(FareRequest) Calculates the base fare considering metro line characteristics and route complexity. public Task<decimal> CalculateBaseFareAsync(FareRequest request) Parameters request FareRequest The fare calculation request containing trip details. Returns Task<decimal> A task that represents the asynchronous operation. The task result contains the calculated base fare. CanHandle(FareRequest) Determines if this strategy can handle the given fare request. public bool CanHandle(FareRequest request) Parameters request FareRequest The fare calculation request to evaluate. Returns bool True if the strategy can handle the request; otherwise, false."
  },
  "api/FareCalculator.Strategies.PassengerDiscountStrategy.html": {
    "href": "api/FareCalculator.Strategies.PassengerDiscountStrategy.html",
    "title": "Class PassengerDiscountStrategy | Metro Fare Calculator API Documentation",
    "summary": "Class PassengerDiscountStrategy Namespace FareCalculator.Strategies Assembly FareCalculator.dll public class PassengerDiscountStrategy : IDiscountStrategy Inheritance object PassengerDiscountStrategy Implements IDiscountStrategy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PassengerDiscountStrategy(ILogger<PassengerDiscountStrategy>, IOptions<FareCalculationOptions>) public PassengerDiscountStrategy(ILogger<PassengerDiscountStrategy> logger, IOptions<FareCalculationOptions> options) Parameters logger ILogger<PassengerDiscountStrategy> options IOptions<FareCalculationOptions> Properties Priority Gets the priority of this discount strategy for application when multiple strategies apply. Higher values indicate higher priority and are applied first. public int Priority { get; } Property Value int An integer representing the strategy's priority. Higher numbers are applied first. StrategyName Gets the unique name of this discount strategy. public string StrategyName { get; } Property Value string A descriptive name identifying the strategy (e.g., \"PassengerDiscount\", \"TimeBasedDiscount\"). Methods AppliesTo(PassengerType) Determines whether this discount strategy applies to the specified passenger type. public bool AppliesTo(PassengerType passengerType) Parameters passengerType PassengerType The type of passenger to evaluate for discount eligibility. Returns bool True if this discount strategy applies to the passenger type; otherwise, false. ApplyDiscount(decimal, FareRequest) Applies this discount strategy to the specified base fare for the given request. public decimal ApplyDiscount(decimal baseFare, FareRequest request) Parameters baseFare decimal The original base fare amount before discount application. request FareRequest The fare calculation request containing passenger type and travel details. Returns decimal The fare amount after applying the discount. Returns the original amount if no discount applies. Exceptions ArgumentException Thrown when baseFare is negative. ArgumentNullException Thrown when the request parameter is null."
  },
  "api/FareCalculator.Strategies.TimeBasedDiscountStrategy.html": {
    "href": "api/FareCalculator.Strategies.TimeBasedDiscountStrategy.html",
    "title": "Class TimeBasedDiscountStrategy | Metro Fare Calculator API Documentation",
    "summary": "Class TimeBasedDiscountStrategy Namespace FareCalculator.Strategies Assembly FareCalculator.dll public class TimeBasedDiscountStrategy : IDiscountStrategy Inheritance object TimeBasedDiscountStrategy Implements IDiscountStrategy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TimeBasedDiscountStrategy(ILogger<TimeBasedDiscountStrategy>, IOptions<FareCalculationOptions>) public TimeBasedDiscountStrategy(ILogger<TimeBasedDiscountStrategy> logger, IOptions<FareCalculationOptions> options) Parameters logger ILogger<TimeBasedDiscountStrategy> options IOptions<FareCalculationOptions> Properties Priority Gets the priority of this discount strategy for application when multiple strategies apply. Higher values indicate higher priority and are applied first. public int Priority { get; } Property Value int An integer representing the strategy's priority. Higher numbers are applied first. StrategyName Gets the unique name of this discount strategy. public string StrategyName { get; } Property Value string A descriptive name identifying the strategy (e.g., \"PassengerDiscount\", \"TimeBasedDiscount\"). Methods AppliesTo(PassengerType) Determines whether this discount strategy applies to the specified passenger type. public bool AppliesTo(PassengerType passengerType) Parameters passengerType PassengerType The type of passenger to evaluate for discount eligibility. Returns bool True if this discount strategy applies to the passenger type; otherwise, false. ApplyDiscount(decimal, FareRequest) Applies this discount strategy to the specified base fare for the given request. public decimal ApplyDiscount(decimal baseFare, FareRequest request) Parameters baseFare decimal The original base fare amount before discount application. request FareRequest The fare calculation request containing passenger type and travel details. Returns decimal The fare amount after applying the discount. Returns the original amount if no discount applies. Exceptions ArgumentException Thrown when baseFare is negative. ArgumentNullException Thrown when the request parameter is null."
  },
  "api/FareCalculator.Strategies.ZoneBasedFareStrategy.html": {
    "href": "api/FareCalculator.Strategies.ZoneBasedFareStrategy.html",
    "title": "Class ZoneBasedFareStrategy | Metro Fare Calculator API Documentation",
    "summary": "Class ZoneBasedFareStrategy Namespace FareCalculator.Strategies Assembly FareCalculator.dll public class ZoneBasedFareStrategy : IFareCalculationStrategy Inheritance object ZoneBasedFareStrategy Implements IFareCalculationStrategy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ZoneBasedFareStrategy(ILogger<ZoneBasedFareStrategy>, IFareRuleEngine, IOptions<FareCalculationOptions>) public ZoneBasedFareStrategy(ILogger<ZoneBasedFareStrategy> logger, IFareRuleEngine fareRuleEngine, IOptions<FareCalculationOptions> options) Parameters logger ILogger<ZoneBasedFareStrategy> fareRuleEngine IFareRuleEngine options IOptions<FareCalculationOptions> Properties Priority Gets the priority of this strategy for selection when multiple strategies can handle a request. Higher values indicate higher priority. public int Priority { get; } Property Value int An integer representing the strategy's priority. Higher numbers are selected first. StrategyName Gets the unique name of this fare calculation strategy. public string StrategyName { get; } Property Value string A descriptive name identifying the strategy (e.g., \"ZoneBased\", \"DistanceBased\"). Methods CalculateBaseFareAsync(FareRequest) Calculates the base fare for a transit journey asynchronously using this strategy's specific algorithm. public Task<decimal> CalculateBaseFareAsync(FareRequest request) Parameters request FareRequest The fare calculation request containing journey details. Returns Task<decimal> A task that represents the asynchronous operation. The task result contains the calculated base fare amount. Exceptions ArgumentNullException Thrown when the request parameter is null. InvalidOperationException Thrown when the strategy cannot handle the given request. CanHandle(FareRequest) Determines whether this strategy can handle the specified fare calculation request. public bool CanHandle(FareRequest request) Parameters request FareRequest The fare calculation request to evaluate. Returns bool True if this strategy can process the request; otherwise, false."
  },
  "api/FareCalculator.Strategies.html": {
    "href": "api/FareCalculator.Strategies.html",
    "title": "Namespace FareCalculator.Strategies | Metro Fare Calculator API Documentation",
    "summary": "Namespace FareCalculator.Strategies Classes DistanceBasedFareStrategy MetroLineFareStrategy Fare calculation strategy that considers metro line characteristics including line multipliers and transfer penalties. PassengerDiscountStrategy TimeBasedDiscountStrategy ZoneBasedFareStrategy"
  },
  "api/FareCalculator.Visualization.MapGeneratorApp.html": {
    "href": "api/FareCalculator.Visualization.MapGeneratorApp.html",
    "title": "Class MapGeneratorApp | Metro Fare Calculator API Documentation",
    "summary": "Class MapGeneratorApp Namespace FareCalculator.Visualization Assembly FareCalculator.dll Console application for generating metro system visualizations. public class MapGeneratorApp Inheritance object MapGeneratorApp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MapGeneratorApp(IServiceProvider, ILogger<MapGeneratorApp>) public MapGeneratorApp(IServiceProvider serviceProvider, ILogger<MapGeneratorApp> logger) Parameters serviceProvider IServiceProvider logger ILogger<MapGeneratorApp> Methods RunAsync(string[]) Runs the map generator application. public Task RunAsync(string[] args) Parameters args string[] Returns Task"
  },
  "api/FareCalculator.Visualization.MetroMapGenerator.html": {
    "href": "api/FareCalculator.Visualization.MetroMapGenerator.html",
    "title": "Class MetroMapGenerator | Metro Fare Calculator API Documentation",
    "summary": "Class MetroMapGenerator Namespace FareCalculator.Visualization Assembly FareCalculator.dll Generates visual representations of the metro system for documentation purposes. public class MetroMapGenerator Inheritance object MetroMapGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MetroMapGenerator(ILogger<MetroMapGenerator>, IStationService, IMetroLineService, IOptions<FareCalculationOptions>, IOptions<MetroLineOptions>) public MetroMapGenerator(ILogger<MetroMapGenerator> logger, IStationService stationService, IMetroLineService metroLineService, IOptions<FareCalculationOptions> fareOptions, IOptions<MetroLineOptions> metroLineOptions) Parameters logger ILogger<MetroMapGenerator> stationService IStationService metroLineService IMetroLineService fareOptions IOptions<FareCalculationOptions> metroLineOptions IOptions<MetroLineOptions> Methods GenerateAsciiMapAsync() Generates an ASCII art representation of the metro system. public Task<string> GenerateAsciiMapAsync() Returns Task<string> GenerateFareExplanationAsync() public Task<string> GenerateFareExplanationAsync() Returns Task<string> GenerateFareTableHtmlAsync() Generates a fare explanation table in HTML format. public Task<string> GenerateFareTableHtmlAsync() Returns Task<string> GenerateHtmlVisualizationAsync() Generates an HTML/SVG visualization of the metro system. public Task<string> GenerateHtmlVisualizationAsync() Returns Task<string> GenerateMermaidDiagramAsync() Generates a Mermaid diagram representation of the metro system. public Task<string> GenerateMermaidDiagramAsync() Returns Task<string>"
  },
  "api/FareCalculator.Visualization.VisualizationDemo.html": {
    "href": "api/FareCalculator.Visualization.VisualizationDemo.html",
    "title": "Class VisualizationDemo | Metro Fare Calculator API Documentation",
    "summary": "Class VisualizationDemo Namespace FareCalculator.Visualization Assembly FareCalculator.dll Demo program to showcase metro system visualization capabilities. public class VisualizationDemo Inheritance object VisualizationDemo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RunAsync() Runs the visualization demo. public static Task RunAsync() Returns Task"
  },
  "api/FareCalculator.Visualization.html": {
    "href": "api/FareCalculator.Visualization.html",
    "title": "Namespace FareCalculator.Visualization | Metro Fare Calculator API Documentation",
    "summary": "Namespace FareCalculator.Visualization Classes MapGeneratorApp Console application for generating metro system visualizations. MetroMapGenerator Generates visual representations of the metro system for documentation purposes. VisualizationDemo Demo program to showcase metro system visualization capabilities."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Reference | Metro Fare Calculator API Documentation",
    "summary": "API Reference Welcome to the Metro Fare Calculator API documentation. This section contains the complete API reference for all public classes, interfaces, and methods. Core Namespaces FareCalculator.Configuration Configuration classes for strongly-typed settings management. Key Classes: FareCalculationOptions - Main fare calculation settings GeographyOptions - Geographical calculation constants StationOptions - Station data configuration FareCalculator.Interfaces Service contracts and abstractions. Key Interfaces: IFareCalculationService - Main fare calculation service IStationService - Station management operations IFareRuleEngine - Business rule processing IFareCalculationStrategy - Strategy pattern for fare calculation IDiscountStrategy - Strategy pattern for discount application IFareCalculationState - State pattern for workflow management FareCalculator.Models Core data structures and entities. Key Classes: Station - Metro station with location and zone information FareRequest - Fare calculation input parameters FareResponse - Fare calculation results PassengerType - Passenger classification enumeration FareCalculator.Services Business logic implementations. Key Classes: FareCalculationService - Main fare calculation implementation StationService - Station management and distance calculations FareRuleEngine - Business rules and fare adjustments FareCalculationStateMachine - State machine orchestration FareCalculator.Strategies Strategy pattern implementations for fare calculation algorithms. Key Classes: ZoneBasedFareStrategy - Zone-based fare calculation DistanceBasedFareStrategy - Distance-based fare calculation PassengerDiscountStrategy - Passenger type discounts TimeBasedDiscountStrategy - Time-based fare adjustments FareCalculator.States State pattern implementations for fare calculation workflow. Key Classes: InitialCalculationState - Request validation and setup BaseFareCalculationState - Base fare calculation DiscountApplicationState - Discount strategy application FinalCalculationState - Final fare calculation and formatting Quick Start Basic Fare Calculation // Inject the service IFareCalculationService fareService; // Create a fare request var request = new FareRequest { Origin = new Station { Id = 1, Name = \"Downtown Central\", Zone = \"A\" }, Destination = new Station { Id = 6, Name = \"Airport Express\", Zone = \"C\" }, PassengerType = PassengerType.Adult, TravelDate = DateTime.Now }; // Calculate fare var response = await fareService.CalculateFareAsync(request); Console.WriteLine($\"Fare: ${response.Amount:F2}\"); Station Management // Inject the service IStationService stationService; // Get station by ID var station = await stationService.GetStationByIdAsync(1); // Get all stations var allStations = await stationService.GetAllStationsAsync(); // Calculate distance between stations var distance = await stationService.CalculateDistanceAsync(origin, destination); Architecture Patterns The API implements several design patterns: Strategy Pattern: Pluggable fare calculation algorithms State Pattern: Workflow-based fare processing Dependency Injection: Loose coupling and testability Options Pattern: Strongly-typed configuration Repository Pattern: Data access abstraction Configuration All services use the .NET Options pattern for configuration: // Register configuration services.Configure<FareCalculationOptions>( configuration.GetSection(\"FareCalculation\")); // Inject into services public class FareCalculationService { public FareCalculationService(IOptions<FareCalculationOptions> options) { _options = options.Value; } } See the Configuration Documentation for complete details. Error Handling All services include comprehensive error handling: ArgumentNullException - For null parameters ArgumentException - For invalid parameter values InvalidOperationException - For invalid state transitions Thread Safety All services are designed to be thread-safe and can be registered as singletons or scoped services in the DI container. Performance The API is optimized for performance: Efficient distance calculations using Haversine formula Caching-friendly design Minimal memory allocations Fast lookup operations Testing The API is fully covered by unit and integration tests. See Test Documentation for details."
  },
  "docs/API-Documentation.html": {
    "href": "docs/API-Documentation.html",
    "title": "API Documentation Guide | Metro Fare Calculator API Documentation",
    "summary": "API Documentation Guide Overview The FareCalculator project generates comprehensive XML documentation that can be used by IDEs, documentation generators, and API tools to provide IntelliSense, parameter hints, and detailed API documentation. XML Documentation Files \uD83D\uDCC1 Generated Files Main Project: src/FareCalculator/bin/Debug/net8.0/FareCalculator.xml (52KB) Test Project: tests/FareCalculator.Tests/bin/Debug/net8.0/FareCalculator.Tests.xml \uD83D\uDD27 Usage in IDEs The XML documentation files are automatically used by: Visual Studio: Provides IntelliSense with parameter descriptions and method summaries VS Code: Shows hover information and parameter hints JetBrains Rider: Enhanced code completion and documentation tooltips API Reference \uD83C\uDFDB️ Core Interfaces IFareCalculationService Main service interface for fare calculations. Task<FareResponse> CalculateFareAsync(FareRequest request); IStationService Station management and distance calculation services. Task<Station?> GetStationByIdAsync(int id); Task<Station?> GetStationByNameAsync(string name); Task<IEnumerable<Station>> GetAllStationsAsync(); Task<double> CalculateDistanceAsync(Station origin, Station destination); IFareCalculationStrategy Strategy pattern interface for fare calculation algorithms. string StrategyName { get; } Task<decimal> CalculateBaseFareAsync(FareRequest request); bool CanHandle(FareRequest request); int Priority { get; } IDiscountStrategy Strategy pattern interface for discount applications. string StrategyName { get; } decimal ApplyDiscount(decimal baseFare, FareRequest request); bool AppliesTo(PassengerType passengerType); int Priority { get; } IFareCalculationState State pattern interface for workflow management. string StateName { get; } Task<FareCalculationContext> ProcessAsync(FareCalculationContext context); bool CanTransitionTo(IFareCalculationState nextState); \uD83D\uDCCA Data Models Station Represents a metro station with location and zone information. public class Station { public int Id { get; set; } public string Name { get; set; } public string Zone { get; set; } public double Latitude { get; set; } public double Longitude { get; set; } } FareRequest Input data for fare calculation requests. public class FareRequest { public Station Origin { get; set; } public Station Destination { get; set; } public PassengerType PassengerType { get; set; } public DateTime TravelDate { get; set; } } FareResponse Output data containing calculated fare information. public class FareResponse { public decimal Amount { get; set; } public string Currency { get; set; } public int NumberOfZones { get; set; } public double Distance { get; set; } public string FareType { get; set; } public string Description { get; set; } } PassengerType Enum defining passenger classifications for discount eligibility. public enum PassengerType { Adult, // No discount Child, // 50% discount Senior, // 30% discount Student, // 20% discount Disabled // 50% discount } \uD83D\uDD04 Workflow States InitialCalculationState Validates request data Initializes calculation context Sets up logging and response object BaseFareCalculationState Selects appropriate fare calculation strategy Calculates base fare amount Determines distance and zone information DiscountApplicationState Applies all applicable discount strategies Tracks discount amounts and audit trail Processes discounts in priority order FinalCalculationState Rounds final fare amount Calculates zone count Generates comprehensive fare description \uD83C\uDFAF Strategy Implementations Fare Calculation Strategies ZoneBasedFareStrategy (Priority: 100) Primary strategy for zone-based calculations Uses zone mapping: 1 zone = $2.50, 2 zones = $3.75, 3+ zones = $5.00 DistanceBasedFareStrategy (Priority: 50) Fallback strategy using GPS coordinates Rate: $0.25 per kilometer Discount Strategies PassengerDiscountStrategy (Priority: 100) Applies passenger type discounts Child/Disabled: 50%, Senior: 30%, Student: 20%, Adult: 0% TimeBasedDiscountStrategy (Priority: 90) Peak hours (7-9 AM, 5-7 PM weekdays): +25% surcharge Off-peak hours (10 PM - 6 AM): -10% discount Documentation Generation Commands \uD83D\uDD28 Build Commands # Build with XML documentation dotnet build # Build specific configuration dotnet build --configuration Release # Verbose build output dotnet build --verbosity detailed \uD83D\uDCD6 Documentation Tools The generated XML files can be used with: DocFX: Microsoft's documentation generation tool Sandcastle: Windows-based documentation generator Swagger/OpenAPI: For API documentation if exposing as web API NDoc: Legacy documentation generator Example Usage Basic Fare Calculation // Create request var request = new FareRequest { Origin = new Station { Id = 1, Name = \"Downtown Central\", Zone = \"A\" }, Destination = new Station { Id = 6, Name = \"Airport Express\", Zone = \"C\" }, PassengerType = PassengerType.Adult, TravelDate = DateTime.Now }; // Calculate fare var response = await fareCalculationService.CalculateFareAsync(request); // Result: $5.00 for 3-zone journey With Discounts var request = new FareRequest { Origin = new Station { Id = 1, Name = \"Downtown Central\", Zone = \"A\" }, Destination = new Station { Id = 6, Name = \"Airport Express\", Zone = \"C\" }, PassengerType = PassengerType.Child, // 50% discount TravelDate = new DateTime(2024, 1, 1, 3, 0, 0) // Off-peak: -10% }; var response = await fareCalculationService.CalculateFareAsync(request); // Result: $2.25 (Base: $5.00 → Child discount: $2.50 → Off-peak: $2.25) Testing Documentation The test project also generates XML documentation covering: Unit Tests: Individual component testing Integration Tests: End-to-end workflow testing Strategy Tests: Pattern implementation testing State Tests: Workflow state testing Test Coverage 54 Total Tests: Comprehensive coverage of all functionality Pattern Testing: Both Strategy and State patterns fully tested Error Handling: Exception scenarios and edge cases covered Business Logic: All fare rules and discount calculations verified"
  },
  "docs/Design-Patterns-Implementation.html": {
    "href": "docs/Design-Patterns-Implementation.html",
    "title": "Design Patterns Implementation Guide | Metro Fare Calculator API Documentation",
    "summary": "Design Patterns Implementation Guide Overview The Metro Fare Calculator has been enhanced with two powerful design patterns: Strategy Pattern: For flexible fare calculation and discount algorithms State Pattern: For managing the fare calculation workflow XML Documentation Generation The project is configured to automatically generate comprehensive XML documentation files during build: \uD83D\uDCCB Configuration Main Project: FareCalculator.xml generated in bin/Debug/net8.0/ Test Project: FareCalculator.Tests.xml generated in test output directory Complete API Documentation: All public classes, methods, and properties documented with XML comments \uD83D\uDEE0 Build Settings <PropertyGroup> <GenerateDocumentationFile>true</GenerateDocumentationFile> <DocumentationFile>bin\\$(Configuration)\\$(TargetFramework)\\$(AssemblyName).xml</DocumentationFile> <NoWarn>$(NoWarn);1591</NoWarn> </PropertyGroup> \uD83D\uDCD6 Documentation Features Comprehensive Coverage: All interfaces, models, services, and states documented Parameter Descriptions: Detailed explanations of method parameters and return values Exception Documentation: All thrown exceptions documented with conditions Design Pattern Explanations: XML comments explain Strategy and State pattern implementations Usage Examples: Code examples and value descriptions for properties Strategy Pattern Implementation \uD83C\uDFAF Purpose The Strategy pattern allows the system to dynamically choose different algorithms for fare calculation and discount application based on runtime conditions. \uD83D\uDCCB Key Components 1. Fare Calculation Strategies (IFareCalculationStrategy) public interface IFareCalculationStrategy { string StrategyName { get; } Task<decimal> CalculateBaseFareAsync(FareRequest request); bool CanHandle(FareRequest request); int Priority { get; } } Implementations: ZoneBasedFareStrategy (Priority: 100) - Primary strategy for zone-based calculation DistanceBasedFareStrategy (Priority: 50) - Fallback strategy using GPS coordinates 2. Discount Strategies (IDiscountStrategy) public interface IDiscountStrategy { string StrategyName { get; } decimal ApplyDiscount(decimal baseFare, FareRequest request); bool AppliesTo(PassengerType passengerType); int Priority { get; } } Implementations: PassengerDiscountStrategy (Priority: 100) - Applies passenger type discounts TimeBasedDiscountStrategy (Priority: 90) - Applies peak/off-peak pricing \uD83D\uDD04 Strategy Selection Process Fare Calculation: System selects the highest priority strategy that can handle the request Discount Application: System applies all applicable discount strategies in priority order ✅ Benefits Extensibility: Easy to add new calculation methods (flat rate, premium zones, etc.) Maintainability: Each strategy is isolated and testable Flexibility: Runtime strategy selection based on request characteristics State Pattern Implementation \uD83C\uDFAF Purpose The State pattern manages the fare calculation workflow as a series of well-defined states, each handling specific responsibilities. \uD83D\uDCCA State Workflow Diagram stateDiagram-v2 [*] --> Initial : Start Calculation Initial --> BaseFareCalculation : Validate Request<br/>Initialize Context BaseFareCalculation --> DiscountApplication : Calculate Base Fare<br/>Select Strategy<br/>Get Distance/Zones DiscountApplication --> FinalCalculation : Apply Discounts<br/>Track Adjustments FinalCalculation --> [*] : Finalize Amount<br/>Generate Description<br/>Complete Response note right of Initial • Validate request data • Initialize context • Set up logging • Prepare response object end note note right of BaseFareCalculation • Select fare strategy by priority • Calculate base fare amount • Calculate distance between stations • Determine zone information end note note right of DiscountApplication • Find applicable discount strategies • Apply discounts in priority order • Track total discount amount • Maintain audit trail end note note right of FinalCalculation • Round final fare amount • Calculate zone count • Generate fare description • Complete response object end note \uD83D\uDCCB State Workflow 1. Initial State (InitialCalculationState) Validates the request Initializes the calculation context Sets up logging and metadata 2. Base Fare Calculation State (BaseFareCalculationState) Selects appropriate fare calculation strategy Calculates base fare amount Collects distance and zone information 3. Discount Application State (DiscountApplicationState) Applies all relevant discount strategies Tracks discount amounts and reasons Maintains audit trail of adjustments 4. Final Calculation State (FinalCalculationState) Rounds final amount Generates fare description Prepares final response object \uD83D\uDD04 State Transition Rules Initial → BaseFareCalculation → DiscountApplication → FinalCalculation Each state validates transitions and maintains context integrity. \uD83D\uDCCA Context Object public class FareCalculationContext { public FareRequest Request { get; set; } public FareResponse Response { get; set; } public decimal CurrentFare { get; set; } public IFareCalculationState CurrentState { get; set; } public Dictionary<string, object> Data { get; set; } public List<string> ProcessingLog { get; set; } } ✅ Benefits Clarity: Each state has a single responsibility Maintainability: Easy to modify individual steps Debuggability: Complete audit trail of processing steps Extensibility: Easy to add new states or modify workflow Dependency Injection Configuration Service Registration // Register strategy pattern implementations services.AddScoped<IFareCalculationStrategy, ZoneBasedFareStrategy>(); services.AddScoped<IFareCalculationStrategy, DistanceBasedFareStrategy>(); services.AddScoped<IDiscountStrategy, PassengerDiscountStrategy>(); services.AddScoped<IDiscountStrategy, TimeBasedDiscountStrategy>(); // Register state pattern implementations services.AddScoped<InitialCalculationState>(); services.AddScoped<BaseFareCalculationState>(); services.AddScoped<DiscountApplicationState>(); services.AddScoped<FinalCalculationState>(); // Register state machine services.AddScoped<IFareCalculationStateMachine, FareCalculationStateMachine>(); Example Execution Flow Input Origin: Airport Express (Zone C) Destination: Harbor View (Zone A) Passenger: Adult Time: 3:38 AM (Off-peak) Processing Log 1. Entering state: Initial - Initialized calculation at 2025-06-23 03:38:39 - Route: Airport Express → Harbor View - Passenger: Adult - Travel Date: 2025-06-23 03:38 2. Entering state: BaseFareCalculation - Selected strategy: Zone-Based Calculation - Zone calculation: 3 zones = $5.00 - Distance: 20.74 km 3. Entering state: DiscountApplication - Found 2 applicable discount strategies - Applied Passenger Type Discount: $5.00 → $5.00 (Adult: 0%) - Applied Time-Based Discount: $5.00 → $4.50 (Off-peak: -10%) 4. Entering state: FinalCalculation - Final fare: $4.50 - Calculation completed at 2025-06-23 03:38:39 Output Fare Amount: $4.50 USD Fare Type: Adult - Off-Peak Hours Description: Journey from Airport Express to Harbor View. Calculated using Zone-Based Calculation strategy, covering 3 zone(s). Base fare: $5.00, Final fare after adjustments: $4.50 Testing Strategy Unit Tests Strategy Tests: Test each strategy implementation independently State Tests: Test individual state processing logic Integration Tests: Test complete workflow scenarios Test Coverage 69 total tests (up from 45) Full coverage of both original and pattern-based implementations Backward compatibility maintained Extending the System Adding New Fare Calculation Strategy public class FlatRateFareStrategy : IFareCalculationStrategy { public string StrategyName => \"Flat Rate\"; public int Priority => 75; public bool CanHandle(FareRequest request) => request.Origin.Zone == \"EXPRESS\"; public Task<decimal> CalculateBaseFareAsync(FareRequest request) => Task.FromResult(3.00m); } Adding New Discount Strategy public class GroupDiscountStrategy : IDiscountStrategy { public string StrategyName => \"Group Discount\"; public int Priority => 80; public bool AppliesTo(PassengerType passengerType) => true; public decimal ApplyDiscount(decimal baseFare, FareRequest request) { // Apply 15% discount for group bookings return request.Data.ContainsKey(\"GroupSize\") && (int)request.Data[\"GroupSize\"] >= 5 ? baseFare * 0.85m : baseFare; } } Adding New Processing State public class ValidationState : IFareCalculationState { public string StateName => \"Validation\"; public Task<FareCalculationContext> ProcessAsync(FareCalculationContext context) { // Validate business rules before calculation ValidateStations(context.Request.Origin, context.Request.Destination); ValidateDateTime(context.Request.TravelDate); return Task.FromResult(context); } public bool CanTransitionTo(IFareCalculationState nextState) => nextState.StateName == \"Initial\"; } Architecture Benefits \uD83C\uDFAF Single Responsibility Principle Each strategy and state has one clear purpose \uD83D\uDD13 Open/Closed Principle Open for extension (new strategies/states) but closed for modification \uD83D\uDD04 Dependency Inversion High-level modules depend on abstractions, not concretions \uD83E\uDDEA Testability Each component can be tested independently with mock dependencies \uD83D\uDCC8 Scalability Easy to add new fare rules, calculation methods, or processing steps This pattern-based architecture makes the fare calculation system highly maintainable, extensible, and testable while preserving all existing functionality."
  },
  "docs/Metro-System-Overview.html": {
    "href": "docs/Metro-System-Overview.html",
    "title": "Metro System Overview | Metro Fare Calculator API Documentation",
    "summary": "Metro System Overview This document provides a comprehensive overview of the metro fare calculation system, including network topology, fare structure, and operational information. System Map The metro system consists of 4 colored lines serving 8 stations across 3 concentric fare zones. Zone Structure The metro system uses a concentric zone structure for fare calculation: ┌─────────────────────────────────────────┐ │ Zone C (Outer) │ │ ┌───────────────────────────────────┐ │ │ │ Zone B (Middle) │ │ │ │ ┌─────────────────────────────┐ │ │ │ │ │ Zone A (Central) │ │ │ │ │ └─────────────────────────────┘ │ │ │ └───────────────────────────────────┘ │ └─────────────────────────────────────────┘ Fare Structure Base Fares by Zone Distance Zone Combination Base Fare Within same zone $2.50 1 zone difference $2.50 2 zone difference $3.75 3 zone difference $5.00 Metro Line Multipliers Line Multiplier Type Red Line (RL) 1.2x Express Blue Line (BL) 1.0x Local Green Line (GL) 1.0x Local Yellow Line (YL) 0.8x Shuttle Passenger Discounts Passenger Type Discount Adult 0% Child 50% Senior 30% Student 20% Disabled 50% How to Generate Visualizations The visualizations can be automatically generated using: cd src/FareCalculator dotnet run --visualize This creates: metro-system-map.md - Mermaid diagram metro-system-ascii.txt - ASCII art map fare-structure.txt - Fare calculation guide Stations by Zone Zone A (Central) Downtown Central (RL, BL) [TRANSFER] Uptown North (RL) Harbor View (BL) Zone B (Middle) Eastside Plaza (BL, GL) [TRANSFER] Westwood Terminal (GL) University Campus (RL, GL) [TRANSFER] Zone C (Outer) Southgate Junction (BL, GL) [TRANSFER] Airport Express (YL) Time-Based Adjustments Peak Hours: +25% surcharge (7-9 AM, 5-7 PM weekdays) Off-Peak: -10% discount (10 PM - 6 AM) Transfer Penalties Different penalties apply based on line combinations: Blue ↔ Red: $0.25 Blue ↔ Green: $0.50 Green ↔ Yellow: $0.75 Generated Files Running dotnet run --visualize creates: metro-system-map.md - Interactive Mermaid diagram metro-system-ascii.txt - Text-based network map fare-structure.txt - Complete fare calculation reference For detailed fare calculations and interactive examples, see the generated files in the docs directory."
  },
  "docs/Test-Documentation.html": {
    "href": "docs/Test-Documentation.html",
    "title": "Test Documentation | Metro Fare Calculator API Documentation",
    "summary": "Test Documentation Overview The FareCalculator project includes comprehensive test coverage with 54 test cases across unit tests, integration tests, and strategy/state pattern tests. All tests use xUnit framework with Moq for mocking dependencies. Test Statistics Total Tests: 54 Unit Tests: 45 Integration Tests: 9 Success Rate: 100% (54/54 passing) Test Coverage: Comprehensive coverage of all major components Test Suites 1. StationServiceTests (8 tests) Location: tests/FareCalculator.Tests/Services/StationServiceTests.cs Test Methods: GetStationByIdAsync_ValidId_ReturnsStation GetStationByIdAsync_InvalidId_ReturnsNull GetStationByNameAsync_ValidName_ReturnsStation GetStationByNameAsync_CaseInsensitive_ReturnsStation GetStationByNameAsync_InvalidName_ReturnsNull GetAllStationsAsync_ReturnsAllStations CalculateDistanceAsync_ValidStations_ReturnsDistance CalculateDistanceAsync_SameStation_ReturnsZero 2. FareRuleEngineTests (12 tests) Location: tests/FareCalculator.Tests/Services/FareRuleEngineTests.cs Passenger Discount Tests: Adult: 0% discount Child: 50% discount Senior: 30% discount Student: 20% discount Disabled: 50% discount Time-Based Pricing Tests: Peak hours (weekday 7-9 AM, 5-7 PM): +25% surcharge Off-peak hours (10 PM - 6 AM): -10% discount Regular hours: No adjustment Weekend exclusions 3. ZoneBasedFareStrategyTests (8 tests) Location: tests/FareCalculator.Tests/Strategies/ZoneBasedFareStrategyTests.cs Zone Fare Test Cases: 1 zone: $2.50 2 zones: $3.75 3+ zones: $5.00 4. PassengerDiscountStrategyTests (8 tests) Location: tests/FareCalculator.Tests/Strategies/PassengerDiscountStrategyTests.cs Tests all passenger type discounts and strategy behavior. 5. Integration Tests (9 tests) Location: tests/FareCalculator.Tests/Integration/FareCalculationIntegrationTests.cs End-to-End Scenarios: Same zone adult fare: $2.50 Cross zone child fare with discount Peak hour surcharges Off-peak discounts Combined discount scenarios Running Tests # Run all tests dotnet test # Run with detailed output dotnet test --verbosity normal # Run specific test class dotnet test --filter \"FullyQualifiedName~StationServiceTests\" Test Infrastructure Configuration Mocking: All tests use mock configuration Dependency Injection: Full DI container setup in integration tests Mock Framework: Moq for unit test isolation Theory Tests: Parameterized tests for multiple scenarios Test Execution Running Tests"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Metro Fare Calculator API Documentation",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Metro Fare Calculator API Documentation",
    "summary": "Introduction"
  },
  "docs/metro-system-map.html": {
    "href": "docs/metro-system-map.html",
    "title": "| Metro Fare Calculator API Documentation",
    "summary": "graph TB %% Metro System Map %% Stations by Zone subgraph ZoneA[\"Zone A\"] S1((\"\uD83D\uDE89 Downtown Central\")) S2[\"⚡ Uptown North\"] S8[\"\uD83D\uDE87 Harbor View\"] end subgraph ZoneB[\"Zone B\"] S3((\"\uD83D\uDE87 Eastside Plaza\")) S4[\"\uD83D\uDE89 Westwood Terminal\"] S7((\"\uD83D\uDE87 University Campus\")) end subgraph ZoneC[\"Zone C\"] S5((\"\uD83D\uDE87 Southgate Junction\")) S6[\"\uD83D\uDE89 Airport Express\"] end %% Metro Line Connections %% Red Line (RL) S1 -.->|RL| S2 S2 -.->|RL| S7 %% Blue Line (BL) S1 -.->|BL| S3 S3 -.->|BL| S5 S5 -.->|BL| S8 %% Green Line (GL) S3 -.->|GL| S4 S4 -.->|GL| S5 S5 -.->|GL| S7 %% Yellow Line (YL) %% Styling S1 --> S1 style S1 fill:#FF000015,stroke:#FF0000,stroke-width:2px S2 --> S2 style S2 fill:#FF000015,stroke:#FF0000,stroke-width:2px S7 --> S7 style S7 fill:#FF000015,stroke:#FF0000,stroke-width:2px S1 --> S1 style S1 fill:#0000FF15,stroke:#0000FF,stroke-width:2px S3 --> S3 style S3 fill:#0000FF15,stroke:#0000FF,stroke-width:2px S5 --> S5 style S5 fill:#0000FF15,stroke:#0000FF,stroke-width:2px S8 --> S8 style S8 fill:#0000FF15,stroke:#0000FF,stroke-width:2px S3 --> S3 style S3 fill:#00800015,stroke:#008000,stroke-width:2px S4 --> S4 style S4 fill:#00800015,stroke:#008000,stroke-width:2px S5 --> S5 style S5 fill:#00800015,stroke:#008000,stroke-width:2px S7 --> S7 style S7 fill:#00800015,stroke:#008000,stroke-width:2px S6 --> S6 style S6 fill:#FFFF0015,stroke:#FFFF00,stroke-width:2px"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Metro Fare Calculator API Documentation",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image. Metro Fare Calculator Documentation Welcome to the comprehensive documentation for the Metro Fare Calculator project - a sophisticated fare calculation system built with modern design patterns and best practices. \uD83D\uDE87 Project Overview The Metro Fare Calculator is a .NET 8 console application that demonstrates the implementation of: Strategy Pattern for flexible fare calculation algorithms State Pattern for managing calculation workflows Dependency Injection for loose coupling and testability Comprehensive Testing with 54 unit and integration tests XML Documentation for complete API coverage \uD83C\uDFAF Key Features Fare Calculation Strategies Zone-Based Calculation: Primary strategy using metro zone system Distance-Based Calculation: Fallback strategy using GPS coordinates Priority-Based Selection: Automatic strategy selection based on request characteristics Discount Strategies Passenger Type Discounts: Child (50%), Senior (30%), Student (20%), Disabled (50%) Time-Based Pricing: Peak hour surcharges (+25%) and off-peak discounts (-10%) Configurable Rules: Easy to modify or extend discount policies State Machine Workflow Initial State: Request validation and context initialization Base Fare Calculation: Strategy selection and fare computation Discount Application: Multi-strategy discount processing Final Calculation: Amount rounding and response generation \uD83D\uDCD6 Documentation Sections Design Patterns Implementation Detailed explanation of how Strategy and State patterns are implemented, including: Pattern structure and benefits Implementation examples Workflow diagrams Extension points API Documentation Guide Comprehensive API reference covering: Core interfaces and implementations Data models and enums Usage examples and scenarios XML documentation features \uD83C\uDFD7️ Architecture graph TD A[FareRequest] --> B[FareCalculationService] B --> C[FareCalculationStateMachine] C --> D[InitialCalculationState] D --> E[BaseFareCalculationState] E --> F[DiscountApplicationState] F --> G[FinalCalculationState] G --> H[FareResponse] E --> I[IFareCalculationStrategy] I --> J[ZoneBasedFareStrategy] I --> K[DistanceBasedFareStrategy] F --> L[IDiscountStrategy] L --> M[PassengerDiscountStrategy] L --> N[TimeBasedDiscountStrategy] \uD83D\uDE80 Quick Start // Create a fare request var request = new FareRequest { Origin = new Station { Id = 1, Name = \"Downtown Central\", Zone = \"A\" }, Destination = new Station { Id = 6, Name = \"Airport Express\", Zone = \"C\" }, PassengerType = PassengerType.Adult, TravelDate = DateTime.Now }; // Calculate the fare var response = await fareCalculationService.CalculateFareAsync(request); // Result: $5.00 for 3-zone adult journey Console.WriteLine($\"Fare: {response.Amount:C} {response.Currency}\"); \uD83E\uDDEA Testing The project includes comprehensive testing with: 54 Total Tests covering all functionality Unit Tests for individual components Integration Tests for end-to-end workflows Pattern Tests for Strategy and State implementations Error Handling Tests for edge cases and exceptions \uD83D\uDEE0️ Build and Documentation Building the Project dotnet build dotnet test Generating Documentation # Install DocFX (if not already installed) dotnet tool install -g docfx # Generate documentation site docfx docfx.json --serve The documentation will be available at http://localhost:8080 \uD83D\uDCCB API Reference Browse the complete API Reference for detailed information about: Public interfaces and their implementations Data models and their properties Service classes and their methods Exception types and conditions \uD83E\uDD1D Contributing When extending the system: Add New Strategies: Implement IFareCalculationStrategy or IDiscountStrategy Extend Workflow: Add new states implementing IFareCalculationState Update Tests: Ensure comprehensive test coverage for new features Document Changes: Update XML comments and markdown documentation This documentation is automatically generated from XML documentation comments and Markdown files. For the latest information, please refer to the source code and inline documentation."
  },
  "src/FareCalculator/docs/generated/metro-system-map.html": {
    "href": "src/FareCalculator/docs/generated/metro-system-map.html",
    "title": "| Metro Fare Calculator API Documentation",
    "summary": "graph TB %% Metro System Map %% Stations by Zone subgraph ZoneA[\"Zone A\"] S1((\"\uD83D\uDE89 Downtown Central\")) S2[\"⚡ Uptown North\"] S8[\"\uD83D\uDE87 Harbor View\"] end subgraph ZoneB[\"Zone B\"] S3((\"\uD83D\uDE87 Eastside Plaza\")) S4[\"\uD83D\uDE89 Westwood Terminal\"] S7((\"\uD83D\uDE87 University Campus\")) end subgraph ZoneC[\"Zone C\"] S5((\"\uD83D\uDE87 Southgate Junction\")) S6[\"\uD83D\uDE89 Airport Express\"] end %% Metro Line Connections %% Red Line (RL) S1 -.->|RL| S2 S2 -.->|RL| S7 %% Blue Line (BL) S1 -.->|BL| S3 S3 -.->|BL| S5 S5 -.->|BL| S8 %% Green Line (GL) S3 -.->|GL| S4 S4 -.->|GL| S5 S5 -.->|GL| S7 %% Yellow Line (YL) %% Styling S1 --> S1 style S1 fill:#FF000015,stroke:#FF0000,stroke-width:2px S2 --> S2 style S2 fill:#FF000015,stroke:#FF0000,stroke-width:2px S7 --> S7 style S7 fill:#FF000015,stroke:#FF0000,stroke-width:2px S1 --> S1 style S1 fill:#0000FF15,stroke:#0000FF,stroke-width:2px S3 --> S3 style S3 fill:#0000FF15,stroke:#0000FF,stroke-width:2px S5 --> S5 style S5 fill:#0000FF15,stroke:#0000FF,stroke-width:2px S8 --> S8 style S8 fill:#0000FF15,stroke:#0000FF,stroke-width:2px S3 --> S3 style S3 fill:#00800015,stroke:#008000,stroke-width:2px S4 --> S4 style S4 fill:#00800015,stroke:#008000,stroke-width:2px S5 --> S5 style S5 fill:#00800015,stroke:#008000,stroke-width:2px S7 --> S7 style S7 fill:#00800015,stroke:#008000,stroke-width:2px S6 --> S6 style S6 fill:#FFFF0015,stroke:#FFFF00,stroke-width:2px"
  }
}